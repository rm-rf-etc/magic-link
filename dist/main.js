(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["lodash"], factory);
	else if(typeof exports === 'object')
		exports["weir"] = factory(require("lodash"));
	else
		root["weir"] = factory(root["_"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_lodash__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/gun sync recursive":
/*!*******************************!*\
  !*** ./node_modules/gun sync ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/gun sync recursive\";\n\n//# sourceURL=webpack://weir/./node_modules/gun_sync?");

/***/ }),

/***/ "./node_modules/gun/gun.js":
/*!*********************************!*\
  !*** ./node_modules/gun/gun.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {;(function(){\n\n  /* UNBUILD */\n  var root;\n  if(typeof window !== \"undefined\"){ root = window }\n  if(typeof global !== \"undefined\"){ root = global }\n  root = root || {};\n  var console = root.console || {log: function(){}};\n  function USE(arg, req){\n    return req? __webpack_require__(\"./node_modules/gun sync recursive\")(arg) : arg.slice? USE[R(arg)] : function(mod, path){\n      arg(mod = {exports: {}});\n      USE[R(path)] = mod.exports;\n    }\n    function R(p){\n      return p.split('/').slice(-1).toString().replace('.js','');\n    }\n  }\n  if(true){ var common = module }\n  /* UNBUILD */\n\n\t;USE(function(module){\n\t\t// Generic javascript utilities.\n\t\tvar Type = {};\n\t\t//Type.fns = Type.fn = {is: function(fn){ return (!!fn && fn instanceof Function) }}\n\t\tType.fn = {is: function(fn){ return (!!fn && 'function' == typeof fn) }}\n\t\tType.bi = {is: function(b){ return (b instanceof Boolean || typeof b == 'boolean') }}\n\t\tType.num = {is: function(n){ return !list_is(n) && ((n - parseFloat(n) + 1) >= 0 || Infinity === n || -Infinity === n) }}\n\t\tType.text = {is: function(t){ return (typeof t == 'string') }}\n\t\tType.text.ify = function(t){\n\t\t\tif(Type.text.is(t)){ return t }\n\t\t\tif(typeof JSON !== \"undefined\"){ return JSON.stringify(t) }\n\t\t\treturn (t && t.toString)? t.toString() : t;\n\t\t}\n\t\tType.text.random = function(l, c){\n\t\t\tvar s = '';\n\t\t\tl = l || 24; // you are not going to make a 0 length random number, so no need to check type\n\t\t\tc = c || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXZabcdefghijklmnopqrstuvwxyz';\n\t\t\twhile(l > 0){ s += c.charAt(Math.floor(Math.random() * c.length)); l-- }\n\t\t\treturn s;\n\t\t}\n\t\tType.text.match = function(t, o){ var tmp, u;\n\t\t\tif('string' !== typeof t){ return false }\n\t\t\tif('string' == typeof o){ o = {'=': o} }\n\t\t\to = o || {};\n\t\t\ttmp = (o['='] || o['*'] || o['>'] || o['<']);\n\t\t\tif(t === tmp){ return true }\n\t\t\tif(u !== o['=']){ return false }\n\t\t\ttmp = (o['*'] || o['>'] || o['<']);\n\t\t\tif(t.slice(0, (tmp||'').length) === tmp){ return true }\n\t\t\tif(u !== o['*']){ return false }\n\t\t\tif(u !== o['>'] && u !== o['<']){\n\t\t\t\treturn (t >= o['>'] && t <= o['<'])? true : false;\n\t\t\t}\n\t\t\tif(u !== o['>'] && t >= o['>']){ return true }\n\t\t\tif(u !== o['<'] && t <= o['<']){ return true }\n\t\t\treturn false;\n\t\t}\n\t\tType.list = {is: function(l){ return (l instanceof Array) }}\n\t\tType.list.slit = Array.prototype.slice;\n\t\tType.list.sort = function(k){ // creates a new sort function based off some key\n\t\t\treturn function(A,B){\n\t\t\t\tif(!A || !B){ return 0 } A = A[k]; B = B[k];\n\t\t\t\tif(A < B){ return -1 }else if(A > B){ return 1 }\n\t\t\t\telse { return 0 }\n\t\t\t}\n\t\t}\n\t\tType.list.map = function(l, c, _){ return obj_map(l, c, _) }\n\t\tType.list.index = 1; // change this to 0 if you want non-logical, non-mathematical, non-matrix, non-convenient array notation\n\t\tType.obj = {is: function(o){ return o? (o instanceof Object && o.constructor === Object) || Object.prototype.toString.call(o).match(/^\\[object (\\w+)\\]$/)[1] === 'Object' : false }}\n\t\tType.obj.put = function(o, k, v){ return (o||{})[k] = v, o }\n\t\tType.obj.has = function(o, k){ return o && Object.prototype.hasOwnProperty.call(o, k) }\n\t\tType.obj.del = function(o, k){\n\t\t\tif(!o){ return }\n\t\t\to[k] = null;\n\t\t\tdelete o[k];\n\t\t\treturn o;\n\t\t}\n\t\tType.obj.as = function(o, k, v, u){ return o[k] = o[k] || (u === v? {} : v) }\n\t\tType.obj.ify = function(o){\n\t\t\tif(obj_is(o)){ return o }\n\t\t\ttry{o = JSON.parse(o);\n\t\t\t}catch(e){o={}};\n\t\t\treturn o;\n\t\t}\n\t\t;(function(){ var u;\n\t\t\tfunction map(v,k){\n\t\t\t\tif(obj_has(this,k) && u !== this[k]){ return }\n\t\t\t\tthis[k] = v;\n\t\t\t}\n\t\t\tType.obj.to = function(from, to){\n\t\t\t\tto = to || {};\n\t\t\t\tobj_map(from, map, to);\n\t\t\t\treturn to;\n\t\t\t}\n\t\t}());\n\t\tType.obj.copy = function(o){ // because http://web.archive.org/web/20140328224025/http://jsperf.com/cloning-an-object/2\n\t\t\treturn !o? o : JSON.parse(JSON.stringify(o)); // is shockingly faster than anything else, and our data has to be a subset of JSON anyways!\n\t\t}\n\t\t;(function(){\n\t\t\tfunction empty(v,i){ var n = this.n;\n\t\t\t\tif(n && (i === n || (obj_is(n) && obj_has(n, i)))){ return }\n\t\t\t\tif(i){ return true }\n\t\t\t}\n\t\t\tType.obj.empty = function(o, n){\n\t\t\t\tif(!o){ return true }\n\t\t\t\treturn obj_map(o,empty,{n:n})? false : true;\n\t\t\t}\n\t\t}());\n\t\t;(function(){\n\t\t\tfunction t(k,v){\n\t\t\t\tif(2 === arguments.length){\n\t\t\t\t\tt.r = t.r || {};\n\t\t\t\t\tt.r[k] = v;\n\t\t\t\t\treturn;\n\t\t\t\t} t.r = t.r || [];\n\t\t\t\tt.r.push(k);\n\t\t\t};\n\t\t\tvar keys = Object.keys, map;\n\t\t\tObject.keys = Object.keys || function(o){ return map(o, function(v,k,t){t(k)}) }\n\t\t\tType.obj.map = map = function(l, c, _){\n\t\t\t\tvar u, i = 0, x, r, ll, lle, f = fn_is(c);\n\t\t\t\tt.r = null;\n\t\t\t\tif(keys && obj_is(l)){\n\t\t\t\t\tll = keys(l); lle = true;\n\t\t\t\t}\n\t\t\t\tif(list_is(l) || ll){\n\t\t\t\t\tx = (ll || l).length;\n\t\t\t\t\tfor(;i < x; i++){\n\t\t\t\t\t\tvar ii = (i + Type.list.index);\n\t\t\t\t\t\tif(f){\n\t\t\t\t\t\t\tr = lle? c.call(_ || this, l[ll[i]], ll[i], t) : c.call(_ || this, l[i], ii, t);\n\t\t\t\t\t\t\tif(r !== u){ return r }\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//if(Type.test.is(c,l[i])){ return ii } // should implement deep equality testing!\n\t\t\t\t\t\t\tif(c === l[lle? ll[i] : i]){ return ll? ll[i] : ii } // use this for now\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor(i in l){\n\t\t\t\t\t\tif(f){\n\t\t\t\t\t\t\tif(obj_has(l,i)){\n\t\t\t\t\t\t\t\tr = _? c.call(_, l[i], i, t) : c(l[i], i, t);\n\t\t\t\t\t\t\t\tif(r !== u){ return r }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//if(a.test.is(c,l[i])){ return i } // should implement deep equality testing!\n\t\t\t\t\t\t\tif(c === l[i]){ return i } // use this for now\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn f? t.r : Type.list.index? 0 : -1;\n\t\t\t}\n\t\t}());\n\t\tType.time = {};\n\t\tType.time.is = function(t){ return t? t instanceof Date : (+new Date().getTime()) }\n\n\t\tvar fn_is = Type.fn.is;\n\t\tvar list_is = Type.list.is;\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_has = obj.has, obj_map = obj.map;\n\t\tmodule.exports = Type;\n\t})(USE, './type');\n\n\t;USE(function(module){\n\t\t// On event emitter generic javascript utility.\n\t\tmodule.exports = function onto(tag, arg, as){\n\t\t\tif(!tag){ return {to: onto} }\n\t\t\tvar u, tag = (this.tag || (this.tag = {}))[tag] ||\n\t\t\t(this.tag[tag] = {tag: tag, to: onto._ = {\n\t\t\t\tnext: function(arg){ var tmp;\n\t\t\t\t\tif((tmp = this.to)){\n\t\t\t\t\t\ttmp.next(arg);\n\t\t\t\t}}\n\t\t\t}});\n\t\t\tif(arg instanceof Function){\n\t\t\t\tvar be = {\n\t\t\t\t\toff: onto.off ||\n\t\t\t\t\t(onto.off = function(){\n\t\t\t\t\t\tif(this.next === onto._.next){ return !0 }\n\t\t\t\t\t\tif(this === this.the.last){\n\t\t\t\t\t\t\tthis.the.last = this.back;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.to.back = this.back;\n\t\t\t\t\t\tthis.next = onto._.next;\n\t\t\t\t\t\tthis.back.to = this.to;\n\t\t\t\t\t\tif(this.the.last === this.the){\n\t\t\t\t\t\t\tdelete this.on.tag[this.the.tag];\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\tto: onto._,\n\t\t\t\t\tnext: arg,\n\t\t\t\t\tthe: tag,\n\t\t\t\t\ton: this,\n\t\t\t\t\tas: as,\n\t\t\t\t};\n\t\t\t\t(be.back = tag.last || tag).to = be;\n\t\t\t\treturn tag.last = be;\n\t\t\t}\n\t\t\tif((tag = tag.to) && u !== arg){ tag.next(arg) }\n\t\t\treturn tag;\n\t\t};\n\t})(USE, './onto');\n\n\t;USE(function(module){\n\t\t/* Based on the Hypothetical Amnesia Machine thought experiment */\n\t\tfunction HAM(machineState, incomingState, currentState, incomingValue, currentValue){\n\t\t\tif(machineState < incomingState){\n\t\t\t\treturn {defer: true}; // the incoming value is outside the boundary of the machine's state, it must be reprocessed in another state.\n\t\t\t}\n\t\t\tif(incomingState < currentState){\n\t\t\t\treturn {historical: true}; // the incoming value is within the boundary of the machine's state, but not within the range.\n\n\t\t\t}\n\t\t\tif(currentState < incomingState){\n\t\t\t\treturn {converge: true, incoming: true}; // the incoming value is within both the boundary and the range of the machine's state.\n\n\t\t\t}\n\t\t\tif(incomingState === currentState){\n\t\t\t\tincomingValue = Lexical(incomingValue) || \"\";\n\t\t\t\tcurrentValue = Lexical(currentValue) || \"\";\n\t\t\t\tif(incomingValue === currentValue){ // Note: while these are practically the same, the deltas could be technically different\n\t\t\t\t\treturn {state: true};\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t\tThe following is a naive implementation, but will always work.\n\t\t\t\t\tNever change it unless you have specific needs that absolutely require it.\n\t\t\t\t\tIf changed, your data will diverge unless you guarantee every peer's algorithm has also been changed to be the same.\n\t\t\t\t\tAs a result, it is highly discouraged to modify despite the fact that it is naive,\n\t\t\t\t\tbecause convergence (data integrity) is generally more important.\n\t\t\t\t\tAny difference in this algorithm must be given a new and different name.\n\t\t\t\t*/\n\t\t\t\tif(incomingValue < currentValue){ // Lexical only works on simple value types!\n\t\t\t\t\treturn {converge: true, current: true};\n\t\t\t\t}\n\t\t\t\tif(currentValue < incomingValue){ // Lexical only works on simple value types!\n\t\t\t\t\treturn {converge: true, incoming: true};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {err: \"Invalid CRDT Data: \"+ incomingValue +\" to \"+ currentValue +\" at \"+ incomingState +\" to \"+ currentState +\"!\"};\n\t\t}\n\t\tif(typeof JSON === 'undefined'){\n\t\t\tthrow new Error(\n\t\t\t\t'JSON is not included in this browser. Please load it first: ' +\n\t\t\t\t'ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js'\n\t\t\t);\n\t\t}\n\t\tvar Lexical = JSON.stringify, undefined;\n\t\tmodule.exports = HAM;\n\t})(USE, './HAM');\n\n\t;USE(function(module){\n\t\tvar Type = USE('./type');\n\t\tvar Val = {};\n\t\tVal.is = function(v){ // Valid values are a subset of JSON: null, binary, number (!Infinity), text, or a soul relation. Arrays need special algorithms to handle concurrency, so they are not supported directly. Use an extension that supports them if needed but research their problems first.\n\t\t\tif(v === u){ return false }\n\t\t\tif(v === null){ return true } // \"deletes\", nulling out keys.\n\t\t\tif(v === Infinity){ return false } // we want this to be, but JSON does not support it, sad face.\n\t\t\tif(text_is(v) // by \"text\" we mean strings.\n\t\t\t|| bi_is(v) // by \"binary\" we mean boolean.\n\t\t\t|| num_is(v)){ // by \"number\" we mean integers or decimals.\n\t\t\t\treturn true; // simple values are valid.\n\t\t\t}\n\t\t\treturn Val.link.is(v) || false; // is the value a soul relation? Then it is valid and return it. If not, everything else remaining is an invalid data type. Custom extensions can be built on top of these primitives to support other types.\n\t\t}\n\t\tVal.link = Val.rel = {_: '#'};\n\t\t;(function(){\n\t\t\tVal.link.is = function(v){ // this defines whether an object is a soul relation or not, they look like this: {'#': 'UUID'}\n\t\t\t\tif(v && v[rel_] && !v._ && obj_is(v)){ // must be an object.\n\t\t\t\t\tvar o = {};\n\t\t\t\t\tobj_map(v, map, o);\n\t\t\t\t\tif(o.id){ // a valid id was found.\n\t\t\t\t\t\treturn o.id; // yay! Return it.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false; // the value was not a valid soul relation.\n\t\t\t}\n\t\t\tfunction map(s, k){ var o = this; // map over the object...\n\t\t\t\tif(o.id){ return o.id = false } // if ID is already defined AND we're still looping through the object, it is considered invalid.\n\t\t\t\tif(k == rel_ && text_is(s)){ // the key should be '#' and have a text value.\n\t\t\t\t\to.id = s; // we found the soul!\n\t\t\t\t} else {\n\t\t\t\t\treturn o.id = false; // if there exists anything else on the object that isn't the soul, then it is considered invalid.\n\t\t\t\t}\n\t\t\t}\n\t\t}());\n\t\tVal.link.ify = function(t){ return obj_put({}, rel_, t) } // convert a soul into a relation and return it.\n\t\tType.obj.has._ = '.';\n\t\tvar rel_ = Val.link._, u;\n\t\tvar bi_is = Type.bi.is;\n\t\tvar num_is = Type.num.is;\n\t\tvar text_is = Type.text.is;\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;\n\t\tmodule.exports = Val;\n\t})(USE, './val');\n\n\t;USE(function(module){\n\t\tvar Type = USE('./type');\n\t\tvar Val = USE('./val');\n\t\tvar Node = {_: '_'};\n\t\tNode.soul = function(n, o){ return (n && n._ && n._[o || soul_]) } // convenience function to check to see if there is a soul on a node and return it.\n\t\tNode.soul.ify = function(n, o){ // put a soul on an object.\n\t\t\to = (typeof o === 'string')? {soul: o} : o || {};\n\t\t\tn = n || {}; // make sure it exists.\n\t\t\tn._ = n._ || {}; // make sure meta exists.\n\t\t\tn._[soul_] = o.soul || n._[soul_] || text_random(); // put the soul on it.\n\t\t\treturn n;\n\t\t}\n\t\tNode.soul._ = Val.link._;\n\t\t;(function(){\n\t\t\tNode.is = function(n, cb, as){ var s; // checks to see if an object is a valid node.\n\t\t\t\tif(!obj_is(n)){ return false } // must be an object.\n\t\t\t\tif(s = Node.soul(n)){ // must have a soul on it.\n\t\t\t\t\treturn !obj_map(n, map, {as:as,cb:cb,s:s,n:n});\n\t\t\t\t}\n\t\t\t\treturn false; // nope! This was not a valid node.\n\t\t\t}\n\t\t\tfunction map(v, k){ // we invert this because the way we check for this is via a negation.\n\t\t\t\tif(k === Node._){ return } // skip over the metadata.\n\t\t\t\tif(!Val.is(v)){ return true } // it is true that this is an invalid node.\n\t\t\t\tif(this.cb){ this.cb.call(this.as, v, k, this.n, this.s) } // optionally callback each key/value.\n\t\t\t}\n\t\t}());\n\t\t;(function(){\n\t\t\tNode.ify = function(obj, o, as){ // returns a node from a shallow object.\n\t\t\t\tif(!o){ o = {} }\n\t\t\t\telse if(typeof o === 'string'){ o = {soul: o} }\n\t\t\t\telse if(o instanceof Function){ o = {map: o} }\n\t\t\t\tif(o.map){ o.node = o.map.call(as, obj, u, o.node || {}) }\n\t\t\t\tif(o.node = Node.soul.ify(o.node || {}, o)){\n\t\t\t\t\tobj_map(obj, map, {o:o,as:as});\n\t\t\t\t}\n\t\t\t\treturn o.node; // This will only be a valid node if the object wasn't already deep!\n\t\t\t}\n\t\t\tfunction map(v, k){ var o = this.o, tmp, u; // iterate over each key/value.\n\t\t\t\tif(o.map){\n\t\t\t\t\ttmp = o.map.call(this.as, v, ''+k, o.node);\n\t\t\t\t\tif(u === tmp){\n\t\t\t\t\t\tobj_del(o.node, k);\n\t\t\t\t\t} else\n\t\t\t\t\tif(o.node){ o.node[k] = tmp }\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(Val.is(v)){\n\t\t\t\t\to.node[k] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}());\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_map = obj.map;\n\t\tvar text = Type.text, text_random = text.random;\n\t\tvar soul_ = Node.soul._;\n\t\tvar u;\n\t\tmodule.exports = Node;\n\t})(USE, './node');\n\n\t;USE(function(module){\n\t\tvar Type = USE('./type');\n\t\tvar Node = USE('./node');\n\t\tfunction State(){\n\t\t\tvar t;\n\t\t\t/*if(perf){\n\t\t\t\tt = start + perf.now(); // Danger: Accuracy decays significantly over time, even if precise.\n\t\t\t} else {*/\n\t\t\t\tt = time();\n\t\t\t//}\n\t\t\tif(last < t){\n\t\t\t\treturn N = 0, last = t + State.drift;\n\t\t\t}\n\t\t\treturn last = t + ((N += 1) / D) + State.drift;\n\t\t}\n\t\tvar time = Type.time.is, last = -Infinity, N = 0, D = 1000; // WARNING! In the future, on machines that are D times faster than 2016AD machines, you will want to increase D by another several orders of magnitude so the processing speed never out paces the decimal resolution (increasing an integer effects the state accuracy).\n\t\tvar perf = (typeof performance !== 'undefined')? (performance.timing && performance) : false, start = (perf && perf.timing && perf.timing.navigationStart) || (perf = false);\n\t\tState._ = '>';\n\t\tState.drift = 0;\n\t\tState.is = function(n, k, o){ // convenience function to get the state on a key on a node and return it.\n\t\t\tvar tmp = (k && n && n[N_] && n[N_][State._]) || o;\n\t\t\tif(!tmp){ return }\n\t\t\treturn num_is(tmp = tmp[k])? tmp : -Infinity;\n\t\t}\n\t\tState.lex = function(){ return State().toString(36).replace('.','') }\n\t\tState.ify = function(n, k, s, v, soul){ // put a key's state on a node.\n\t\t\tif(!n || !n[N_]){ // reject if it is not node-like.\n\t\t\t\tif(!soul){ // unless they passed a soul\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tn = Node.soul.ify(n, soul); // then make it so!\n\t\t\t}\n\t\t\tvar tmp = obj_as(n[N_], State._); // grab the states data.\n\t\t\tif(u !== k && k !== N_){\n\t\t\t\tif(num_is(s)){\n\t\t\t\t\ttmp[k] = s; // add the valid state.\n\t\t\t\t}\n\t\t\t\tif(u !== v){ // Note: Not its job to check for valid values!\n\t\t\t\t\tn[k] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n;\n\t\t}\n\t\tState.to = function(from, k, to){\n\t\t\tvar val = (from||{})[k];\n\t\t\tif(obj_is(val)){\n\t\t\t\tval = obj_copy(val);\n\t\t\t}\n\t\t\treturn State.ify(to, k, State.is(from, k), val, Node.soul(from));\n\t\t}\n\t\t;(function(){\n\t\t\tState.map = function(cb, s, as){ var u; // for use with Node.ify\n\t\t\t\tvar o = obj_is(o = cb || s)? o : null;\n\t\t\t\tcb = fn_is(cb = cb || s)? cb : null;\n\t\t\t\tif(o && !cb){\n\t\t\t\t\ts = num_is(s)? s : State();\n\t\t\t\t\to[N_] = o[N_] || {};\n\t\t\t\t\tobj_map(o, map, {o:o,s:s});\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t\tas = as || obj_is(s)? s : u;\n\t\t\t\ts = num_is(s)? s : State();\n\t\t\t\treturn function(v, k, o, opt){\n\t\t\t\t\tif(!cb){\n\t\t\t\t\t\tmap.call({o: o, s: s}, v,k);\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}\n\t\t\t\t\tcb.call(as || this || {}, v, k, o, opt);\n\t\t\t\t\tif(obj_has(o,k) && u === o[k]){ return }\n\t\t\t\t\tmap.call({o: o, s: s}, v,k);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction map(v,k){\n\t\t\t\tif(N_ === k){ return }\n\t\t\t\tState.ify(this.o, k, this.s) ;\n\t\t\t}\n\t\t}());\n\t\tvar obj = Type.obj, obj_as = obj.as, obj_has = obj.has, obj_is = obj.is, obj_map = obj.map, obj_copy = obj.copy;\n\t\tvar num = Type.num, num_is = num.is;\n\t\tvar fn = Type.fn, fn_is = fn.is;\n\t\tvar N_ = Node._, u;\n\t\tmodule.exports = State;\n\t})(USE, './state');\n\n\t;USE(function(module){\n\t\tvar Type = USE('./type');\n\t\tvar Val = USE('./val');\n\t\tvar Node = USE('./node');\n\t\tvar Graph = {};\n\t\t;(function(){\n\t\t\tGraph.is = function(g, cb, fn, as){ // checks to see if an object is a valid graph.\n\t\t\t\tif(!g || !obj_is(g) || obj_empty(g)){ return false } // must be an object.\n\t\t\t\treturn !obj_map(g, map, {cb:cb,fn:fn,as:as}); // makes sure it wasn't an empty object.\n\t\t\t}\n\t\t\tfunction map(n, s){ // we invert this because the way'? we check for this is via a negation.\n\t\t\t\tif(!n || s !== Node.soul(n) || !Node.is(n, this.fn, this.as)){ return true } // it is true that this is an invalid graph.\n\t\t\t\tif(!this.cb){ return }\n\t\t\t\tnf.n = n; nf.as = this.as; // sequential race conditions aren't races.\n\t\t\t\tthis.cb.call(nf.as, n, s, nf);\n\t\t\t}\n\t\t\tfunction nf(fn){ // optional callback for each node.\n\t\t\t\tif(fn){ Node.is(nf.n, fn, nf.as) } // where we then have an optional callback for each key/value.\n\t\t\t}\n\t\t}());\n\t\t;(function(){\n\t\t\tGraph.ify = function(obj, env, as){\n\t\t\t\tvar at = {path: [], obj: obj};\n\t\t\t\tif(!env){\n\t\t\t\t\tenv = {};\n\t\t\t\t} else\n\t\t\t\tif(typeof env === 'string'){\n\t\t\t\t\tenv = {soul: env};\n\t\t\t\t} else\n\t\t\t\tif(env instanceof Function){\n\t\t\t\t\tenv.map = env;\n\t\t\t\t}\n\t\t\t\tif(env.soul){\n\t\t\t\t\tat.link = Val.link.ify(env.soul);\n\t\t\t\t}\n\t\t\t\tenv.shell = (as||{}).shell;\n\t\t\t\tenv.graph = env.graph || {};\n\t\t\t\tenv.seen = env.seen || [];\n\t\t\t\tenv.as = env.as || as;\n\t\t\t\tnode(env, at);\n\t\t\t\tenv.root = at.node;\n\t\t\t\treturn env.graph;\n\t\t\t}\n\t\t\tfunction node(env, at){ var tmp;\n\t\t\t\tif(tmp = seen(env, at)){ return tmp }\n\t\t\t\tat.env = env;\n\t\t\t\tat.soul = soul;\n\t\t\t\tif(Node.ify(at.obj, map, at)){\n\t\t\t\t\tat.link = at.link || Val.link.ify(Node.soul(at.node));\n\t\t\t\t\tif(at.obj !== env.shell){\n\t\t\t\t\t\tenv.graph[Val.link.is(at.link)] = at.node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn at;\n\t\t\t}\n\t\t\tfunction map(v,k,n){\n\t\t\t\tvar at = this, env = at.env, is, tmp;\n\t\t\t\tif(Node._ === k && obj_has(v,Val.link._)){\n\t\t\t\t\treturn n._; // TODO: Bug?\n\t\t\t\t}\n\t\t\t\tif(!(is = valid(v,k,n, at,env))){ return }\n\t\t\t\tif(!k){\n\t\t\t\t\tat.node = at.node || n || {};\n\t\t\t\t\tif(obj_has(v, Node._) && Node.soul(v)){ // ? for safety ?\n\t\t\t\t\t\tat.node._ = obj_copy(v._);\n\t\t\t\t\t}\n\t\t\t\t\tat.node = Node.soul.ify(at.node, Val.link.is(at.link));\n\t\t\t\t\tat.link = at.link || Val.link.ify(Node.soul(at.node));\n\t\t\t\t}\n\t\t\t\tif(tmp = env.map){\n\t\t\t\t\ttmp.call(env.as || {}, v,k,n, at);\n\t\t\t\t\tif(obj_has(n,k)){\n\t\t\t\t\t\tv = n[k];\n\t\t\t\t\t\tif(u === v){\n\t\t\t\t\t\t\tobj_del(n, k);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!(is = valid(v,k,n, at,env))){ return }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!k){ return at.node }\n\t\t\t\tif(true === is){\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\ttmp = node(env, {obj: v, path: at.path.concat(k)});\n\t\t\t\tif(!tmp.node){ return }\n\t\t\t\treturn tmp.link; //{'#': Node.soul(tmp.node)};\n\t\t\t}\n\t\t\tfunction soul(id){ var at = this;\n\t\t\t\tvar prev = Val.link.is(at.link), graph = at.env.graph;\n\t\t\t\tat.link = at.link || Val.link.ify(id);\n\t\t\t\tat.link[Val.link._] = id;\n\t\t\t\tif(at.node && at.node[Node._]){\n\t\t\t\t\tat.node[Node._][Val.link._] = id;\n\t\t\t\t}\n\t\t\t\tif(obj_has(graph, prev)){\n\t\t\t\t\tgraph[id] = graph[prev];\n\t\t\t\t\tobj_del(graph, prev);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction valid(v,k,n, at,env){ var tmp;\n\t\t\t\tif(Val.is(v)){ return true }\n\t\t\t\tif(obj_is(v)){ return 1 }\n\t\t\t\tif(tmp = env.invalid){\n\t\t\t\t\tv = tmp.call(env.as || {}, v,k,n);\n\t\t\t\t\treturn valid(v,k,n, at,env);\n\t\t\t\t}\n\t\t\t\tenv.err = \"Invalid value at '\" + at.path.concat(k).join('.') + \"'!\";\n\t\t\t\tif(Type.list.is(v)){ env.err += \" Use `.set(item)` instead of an Array.\" }\n\t\t\t}\n\t\t\tfunction seen(env, at){\n\t\t\t\tvar arr = env.seen, i = arr.length, has;\n\t\t\t\twhile(i--){ has = arr[i];\n\t\t\t\t\tif(at.obj === has.obj){ return has }\n\t\t\t\t}\n\t\t\t\tarr.push(at);\n\t\t\t}\n\t\t}());\n\t\tGraph.node = function(node){\n\t\t\tvar soul = Node.soul(node);\n\t\t\tif(!soul){ return }\n\t\t\treturn obj_put({}, soul, node);\n\t\t}\n\t\t;(function(){\n\t\t\tGraph.to = function(graph, root, opt){\n\t\t\t\tif(!graph){ return }\n\t\t\t\tvar obj = {};\n\t\t\t\topt = opt || {seen: {}};\n\t\t\t\tobj_map(graph[root], map, {obj:obj, graph: graph, opt: opt});\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\tfunction map(v,k){ var tmp, obj;\n\t\t\t\tif(Node._ === k){\n\t\t\t\t\tif(obj_empty(v, Val.link._)){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.obj[k] = obj_copy(v);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(!(tmp = Val.link.is(v))){\n\t\t\t\t\tthis.obj[k] = v;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(obj = this.opt.seen[tmp]){\n\t\t\t\t\tthis.obj[k] = obj;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.obj[k] = this.opt.seen[tmp] = Graph.to(this.graph, tmp, this.opt);\n\t\t\t}\n\t\t}());\n\t\tvar fn_is = Type.fn.is;\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_has = obj.has, obj_empty = obj.empty, obj_put = obj.put, obj_map = obj.map, obj_copy = obj.copy;\n\t\tvar u;\n\t\tmodule.exports = Graph;\n\t})(USE, './graph');\n\n\t;USE(function(module){\n\t\t// request / response module, for asking and acking messages.\n\t\tUSE('./onto'); // depends upon onto!\n\t\tmodule.exports = function ask(cb, as){\n\t\t\tif(!this.on){ return }\n\t\t\tif(!(cb instanceof Function)){\n\t\t\t\tif(!cb || !as){ return }\n\t\t\t\tvar id = cb['#'] || cb, tmp = (this.tag||empty)[id];\n\t\t\t\tif(!tmp){ return }\n\t\t\t\ttmp = this.on(id, as);\n\t\t\t\tclearTimeout(tmp.err);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvar id = (as && as['#']) || Math.random().toString(36).slice(2);\n\t\t\tif(!cb){ return id }\n\t\t\tvar to = this.on(id, cb, as);\n\t\t\tto.err = to.err || setTimeout(function(){\n\t\t\t\tto.next({err: \"Error: No ACK received yet.\", lack: true});\n\t\t\t\tto.off();\n\t\t\t}, (this.opt||{}).lack || 9000);\n\t\t\treturn id;\n\t\t}\n\t})(USE, './ask');\n\n\t;USE(function(module){\n\t\tvar Type = USE('./type');\n\t\tfunction Dup(opt){\n\t\t\tvar dup = {s:{}};\n\t\t\topt = opt || {max: 1000, age: 1000 * 9};//1000 * 60 * 2};\n\t\t\tdup.check = function(id){ var tmp;\n\t\t\t\tif(!(tmp = dup.s[id])){ return false }\n\t\t\t\tif(tmp.pass){ return tmp.pass = false }\n\t\t\t\treturn dup.track(id);\n\t\t\t}\n\t\t\tdup.track = function(id, pass){\n\t\t\t\tvar it = dup.s[id] || (dup.s[id] = {});\n\t\t\t\tit.was = time_is();\n\t\t\t\tif(pass){ it.pass = true }\n\t\t\t\tif(!dup.to){\n\t\t\t\t\tdup.to = setTimeout(function(){\n\t\t\t\t\t\tvar now = time_is();\n\t\t\t\t\t\tType.obj.map(dup.s, function(it, id){\n\t\t\t\t\t\t\tif(it && opt.age > (now - it.was)){ return }\n\t\t\t\t\t\t\tType.obj.del(dup.s, id);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdup.to = null;\n\t\t\t\t\t}, opt.age + 9);\n\t\t\t\t}\n\t\t\t\treturn it;\n\t\t\t}\n\t\t\treturn dup;\n\t\t}\n\t\tvar time_is = Type.time.is;\n\t\tmodule.exports = Dup;\n\t})(USE, './dup');\n\n\t;USE(function(module){\n\n\t\tfunction Gun(o){\n\t\t\tif(o instanceof Gun){ return (this._ = {gun: this, $: this}).$ }\n\t\t\tif(!(this instanceof Gun)){ return new Gun(o) }\n\t\t\treturn Gun.create(this._ = {gun: this, $: this, opt: o});\n\t\t}\n\n\t\tGun.is = function($){ return ($ instanceof Gun) || ($ && $._ && ($ === $._.$)) || false }\n\n\t\tGun.version = 0.9;\n\n\t\tGun.chain = Gun.prototype;\n\t\tGun.chain.toJSON = function(){};\n\n\t\tvar Type = USE('./type');\n\t\tType.obj.to(Type, Gun);\n\t\tGun.HAM = USE('./HAM');\n\t\tGun.val = USE('./val');\n\t\tGun.node = USE('./node');\n\t\tGun.state = USE('./state');\n\t\tGun.graph = USE('./graph');\n\t\tGun.on = USE('./onto');\n\t\tGun.ask = USE('./ask');\n\t\tGun.dup = USE('./dup');\n\n\t\t;(function(){\n\t\t\tGun.create = function(at){\n\t\t\t\tat.root = at.root || at;\n\t\t\t\tat.graph = at.graph || {};\n\t\t\t\tat.on = at.on || Gun.on;\n\t\t\t\tat.ask = at.ask || Gun.ask;\n\t\t\t\tat.dup = at.dup || Gun.dup();\n\t\t\t\tvar gun = at.$.opt(at.opt);\n\t\t\t\tif(!at.once){\n\t\t\t\t\tat.on('in', root, at);\n\t\t\t\t\tat.on('out', root, {at: at, out: root});\n\t\t\t\t\tGun.on('create', at);\n\t\t\t\t\tat.on('create', at);\n\t\t\t\t}\n\t\t\t\tat.once = 1;\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t\tfunction root(msg){\n\t\t\t\t//add to.next(at); // TODO: MISSING FEATURE!!!\n\t\t\t\tvar ev = this, as = ev.as, at = as.at || as, gun = at.$, dup, tmp;\n\t\t\t\tif(!(tmp = msg['#'])){ tmp = msg['#'] = text_rand(9) }\n\t\t\t\tif((dup = at.dup).check(tmp)){\n\t\t\t\t\tif(as.out === msg.out){\n\t\t\t\t\t\tmsg.out = u;\n\t\t\t\t\t\tev.to.next(msg);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdup.track(tmp);\n\t\t\t\tif(!at.ask(msg['@'], msg)){\n\t\t\t\t\tif(msg.get){\n\t\t\t\t\t\tGun.on.get(msg, gun); //at.on('get', get(msg));\n\t\t\t\t\t}\n\t\t\t\t\tif(msg.put){\n\t\t\t\t\t\tGun.on.put(msg, gun); //at.on('put', put(msg));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tev.to.next(msg);\n\t\t\t\tif(!as.out){\n\t\t\t\t\tmsg.out = root;\n\t\t\t\t\tat.on('out', msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}());\n\n\t\t;(function(){\n\t\t\tGun.on.put = function(msg, gun){\n\t\t\t\tvar at = gun._, ctx = {$: gun, graph: at.graph, put: {}, map: {}, souls: {}, machine: Gun.state(), ack: msg['@'], cat: at, stop: {}};\n\t\t\t\tif(!Gun.graph.is(msg.put, null, verify, ctx)){ ctx.err = \"Error: Invalid graph!\" }\n\t\t\t\tif(ctx.err){ return at.on('in', {'@': msg['#'], err: Gun.log(ctx.err) }) }\n\t\t\t\tobj_map(ctx.put, merge, ctx);\n\t\t\t\tif(!ctx.async){ obj_map(ctx.map, map, ctx) }\n\t\t\t\tif(u !== ctx.defer){\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tGun.on.put(msg, gun);\n\t\t\t\t\t}, ctx.defer - ctx.machine);\n\t\t\t\t}\n\t\t\t\tif(!ctx.diff){ return }\n\t\t\t\tat.on('put', obj_to(msg, {put: ctx.diff}));\n\t\t\t};\n\t\t\tfunction verify(val, key, node, soul){ var ctx = this;\n\t\t\t\tvar state = Gun.state.is(node, key), tmp;\n\t\t\t\tif(!state){ return ctx.err = \"Error: No state on '\"+key+\"' in node '\"+soul+\"'!\" }\n\t\t\t\tvar vertex = ctx.graph[soul] || empty, was = Gun.state.is(vertex, key, true), known = vertex[key];\n\t\t\t\tvar HAM = Gun.HAM(ctx.machine, state, was, val, known);\n\t\t\t\tif(!HAM.incoming){\n\t\t\t\t\tif(HAM.defer){ // pick the lowest\n\t\t\t\t\t\tctx.defer = (state < (ctx.defer || Infinity))? state : ctx.defer;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tctx.put[soul] = Gun.state.to(node, key, ctx.put[soul]);\n\t\t\t\t(ctx.diff || (ctx.diff = {}))[soul] = Gun.state.to(node, key, ctx.diff[soul]);\n\t\t\t\tctx.souls[soul] = true;\n\t\t\t}\n\t\t\tfunction merge(node, soul){\n\t\t\t\tvar ctx = this, cat = ctx.$._, at = (cat.next || empty)[soul];\n\t\t\t\tif(!at){\n\t\t\t\t\tif(!(cat.opt||empty).super){\n\t\t\t\t\t\tctx.souls[soul] = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tat = (ctx.$.get(soul)._);\n\t\t\t\t}\n\t\t\t\tvar msg = ctx.map[soul] = {\n\t\t\t\t\tput: node,\n\t\t\t\t\tget: soul,\n\t\t\t\t\t$: at.$\n\t\t\t\t}, as = {ctx: ctx, msg: msg};\n\t\t\t\tctx.async = !!cat.tag.node;\n\t\t\t\tif(ctx.ack){ msg['@'] = ctx.ack }\n\t\t\t\tobj_map(node, each, as);\n\t\t\t\tif(!ctx.async){ return }\n\t\t\t\tif(!ctx.and){\n\t\t\t\t\t// If it is async, we only need to setup one listener per context (ctx)\n\t\t\t\t\tcat.on('node', function(m){\n\t\t\t\t\t\tthis.to.next(m); // make sure to call other context's listeners.\n\t\t\t\t\t\tif(m !== ctx.map[m.get]){ return } // filter out events not from this context!\n\t\t\t\t\t\tctx.souls[m.get] = false; // set our many-async flag\n\t\t\t\t\t\tobj_map(m.put, patch, m); // merge into view\n\t\t\t\t\t\tif(obj_map(ctx.souls, function(v){ if(v){ return v } })){ return } // if flag still outstanding, keep waiting.\n\t\t\t\t\t\tif(ctx.c){ return } ctx.c = 1; // failsafe for only being called once per context.\n\t\t\t\t\t\tthis.off();\n\t\t\t\t\t\tobj_map(ctx.map, map, ctx); // all done, trigger chains.\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tctx.and = true;\n\t\t\t\tcat.on('node', msg); // each node on the current context's graph needs to be emitted though.\n\t\t\t}\n\t\t\tfunction each(val, key){\n\t\t\t\tvar ctx = this.ctx, graph = ctx.graph, msg = this.msg, soul = msg.get, node = msg.put, at = (msg.$._), tmp;\n\t\t\t\tgraph[soul] = Gun.state.to(node, key, graph[soul]);\n\t\t\t\tif(ctx.async){ return }\n\t\t\t\tat.put = Gun.state.to(node, key, at.put);\n\t\t\t}\n\t\t\tfunction patch(val, key){\n\t\t\t\tvar msg = this, node = msg.put, at = (msg.$._);\n\t\t\t\tat.put = Gun.state.to(node, key, at.put);\n\t\t\t}\n\t\t\tfunction map(msg, soul){\n\t\t\t\tif(!msg.$){ return }\n\t\t\t\tthis.cat.stop = this.stop; // temporary fix till a better solution?\n\t\t\t\t(msg.$._).on('in', msg);\n\t\t\t\tthis.cat.stop = null; // temporary fix till a better solution?\n\t\t\t}\n\n\t\t\tGun.on.get = function(msg, gun){\n\t\t\t\tvar root = gun._, get = msg.get, soul = get[_soul], node = root.graph[soul], has = get[_has], tmp;\n\t\t\t\tvar next = root.next || (root.next = {}), at = next[soul];\n\t\t\t\t// queue concurrent GETs?\n\t\t\t\tif(!node){ return root.on('get', msg) }\n\t\t\t\tif(has){\n\t\t\t\t\tif('string' != typeof has || !obj_has(node, has)){ return root.on('get', msg) }\n\t\t\t\t\tnode = Gun.state.to(node, has);\n\t\t\t\t\t// If we have a key in-memory, do we really need to fetch?\n\t\t\t\t\t// Maybe... in case the in-memory key we have is a local write\n\t\t\t\t\t// we still need to trigger a pull/merge from peers.\n\t\t\t\t} else {\n\t\t\t\t\tnode = Gun.obj.copy(node);\n\t\t\t\t}\n\t\t\t\tnode = Gun.graph.node(node);\n\t\t\t\ttmp = (at||empty).ack;\n\t\t\t\troot.on('in', {\n\t\t\t\t\t'@': msg['#'],\n\t\t\t\t\thow: 'mem',\n\t\t\t\t\tput: node,\n\t\t\t\t\t$: gun\n\t\t\t\t});\n\t\t\t\t//if(0 < tmp){ return }\n\t\t\t\troot.on('get', msg);\n\t\t\t}\n\t\t}());\n\n\t\t;(function(){\n\t\t\tGun.chain.opt = function(opt){\n\t\t\t\topt = opt || {};\n\t\t\t\tvar gun = this, at = gun._, tmp = opt.peers || opt;\n\t\t\t\tif(!obj_is(opt)){ opt = {} }\n\t\t\t\tif(!obj_is(at.opt)){ at.opt = opt }\n\t\t\t\tif(text_is(tmp)){ tmp = [tmp] }\n\t\t\t\tif(list_is(tmp)){\n\t\t\t\t\ttmp = obj_map(tmp, function(url, i, map){\n\t\t\t\t\t\ti = {}; i.id = i.url = url; map(url, i);\n\t\t\t\t\t});\n\t\t\t\t\tif(!obj_is(at.opt.peers)){ at.opt.peers = {}}\n\t\t\t\t\tat.opt.peers = obj_to(tmp, at.opt.peers);\n\t\t\t\t}\n\t\t\t\tat.opt.peers = at.opt.peers || {};\n\t\t\t\tobj_map(opt, function each(v,k){\n\t\t\t\t\tif(!obj_has(this, k) || text.is(v) || obj.empty(v)){ this[k] = v ; return }\n\t\t\t\t\tif(v && v.constructor !== Object && !list_is(v)){ return }\n\t\t\t\t\tobj_map(v, each, this[k]);\n\t\t\t\t}, at.opt);\n\t\t\t\tGun.on('opt', at);\n\t\t\t\tat.opt.uuid = at.opt.uuid || function(){ return state_lex() + text_rand(12) }\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t}());\n\n\t\tvar list_is = Gun.list.is;\n\t\tvar text = Gun.text, text_is = text.is, text_rand = text.random;\n\t\tvar obj = Gun.obj, obj_is = obj.is, obj_has = obj.has, obj_to = obj.to, obj_map = obj.map, obj_copy = obj.copy;\n\t\tvar state_lex = Gun.state.lex, _soul = Gun.val.link._, _has = '.', node_ = Gun.node._, rel_is = Gun.val.link.is;\n\t\tvar empty = {}, u;\n\n\t\tconsole.debug = function(i, s){ return (console.debug.i && i === console.debug.i && console.debug.i++) && (console.log.apply(console, arguments) || s) };\n\n\t\tGun.log = function(){ return (!Gun.log.off && console.log.apply(console, arguments)), [].slice.call(arguments).join(' ') }\n\t\tGun.log.once = function(w,s,o){ return (o = Gun.log.once)[w] = o[w] || 0, o[w]++ || Gun.log(s) }\n\n\t\t;\"Please do not remove these messages unless you are paying for a monthly sponsorship, thanks!\";\n\t\tGun.log.once(\"welcome\", \"Hello wonderful person! :) Thanks for using GUN, feel free to ask for help on https://gitter.im/amark/gun and ask StackOverflow questions tagged with 'gun'!\");\n\t\t;\"Please do not remove these messages unless you are paying for a monthly sponsorship, thanks!\";\n\n\t\tif(typeof window !== \"undefined\"){ (window.GUN = window.Gun = Gun).window = window }\n\t\ttry{ if(typeof common !== \"undefined\"){ common.exports = Gun } }catch(e){}\n\t\tmodule.exports = Gun;\n\n\t\t/*Gun.on('opt', function(ctx){ // FOR TESTING PURPOSES\n\t\t\tthis.to.next(ctx);\n\t\t\tif(ctx.once){ return }\n\t\t\tctx.on('node', function(msg){\n\t\t\t\tvar to = this.to;\n\t\t\t\t//Gun.node.is(msg.put, function(v,k){ msg.put[k] = v + v });\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tto.next(msg);\n\t\t\t\t},1);\n\t\t\t});\n\t\t});*/\n\t})(USE, './root');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./root');\n\t\tGun.chain.back = function(n, opt){ var tmp;\n\t\t\tn = n || 1;\n\t\t\tif(-1 === n || Infinity === n){\n\t\t\t\treturn this._.root.$;\n\t\t\t} else\n\t\t\tif(1 === n){\n\t\t\t\treturn (this._.back || this._).$;\n\t\t\t}\n\t\t\tvar gun = this, at = gun._;\n\t\t\tif(typeof n === 'string'){\n\t\t\t\tn = n.split('.');\n\t\t\t}\n\t\t\tif(n instanceof Array){\n\t\t\t\tvar i = 0, l = n.length, tmp = at;\n\t\t\t\tfor(i; i < l; i++){\n\t\t\t\t\ttmp = (tmp||empty)[n[i]];\n\t\t\t\t}\n\t\t\t\tif(u !== tmp){\n\t\t\t\t\treturn opt? gun : tmp;\n\t\t\t\t} else\n\t\t\t\tif((tmp = at.back)){\n\t\t\t\t\treturn tmp.$.back(n, opt);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(n instanceof Function){\n\t\t\t\tvar yes, tmp = {back: at};\n\t\t\t\twhile((tmp = tmp.back)\n\t\t\t\t&& u === (yes = n(tmp, opt))){}\n\t\t\t\treturn yes;\n\t\t\t}\n\t\t\tif(Gun.num.is(n)){\n\t\t\t\treturn (at.back || at).$.back(n - 1);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tvar empty = {}, u;\n\t})(USE, './back');\n\n\t;USE(function(module){\n\t\t// WARNING: GUN is very simple, but the JavaScript chaining API around GUN\n\t\t// is complicated and was extremely hard to build. If you port GUN to another\n\t\t// language, consider implementing an easier API to build.\n\t\tvar Gun = USE('./root');\n\t\tGun.chain.chain = function(sub){\n\t\t\tvar gun = this, at = gun._, chain = new (sub || gun).constructor(gun), cat = chain._, root;\n\t\t\tcat.root = root = at.root;\n\t\t\tcat.id = ++root.once;\n\t\t\tcat.back = gun._;\n\t\t\tcat.on = Gun.on;\n\t\t\tcat.on('in', input, cat); // For 'in' if I add my own listeners to each then I MUST do it before in gets called. If I listen globally for all incoming data instead though, regardless of individual listeners, I can transform the data there and then as well.\n\t\t\tcat.on('out', output, cat); // However for output, there isn't really the global option. I must listen by adding my own listener individually BEFORE this one is ever called.\n\t\t\treturn chain;\n\t\t}\n\n\t\tfunction output(msg){\n\t\t\tvar put, get, at = this.as, back = at.back, root = at.root, tmp;\n\t\t\tif(!msg.$){ msg.$ = at.$ }\n\t\t\tthis.to.next(msg);\n\t\t\tif(get = msg.get){\n\t\t\t\t/*if(u !== at.put){\n\t\t\t\t\tat.on('in', at);\n\t\t\t\t\treturn;\n\t\t\t\t}*/\n\t\t\t\tif(at.lex){ msg.get = obj_to(at.lex, msg.get) }\n\t\t\t\tif(get['#'] || at.soul){\n\t\t\t\t\tget['#'] = get['#'] || at.soul;\n\t\t\t\t\tmsg['#'] || (msg['#'] = text_rand(9));\n\t\t\t\t\tback = (root.$.get(get['#'])._);\n\t\t\t\t\tif(!(get = get['.'])){\n\t\t\t\t\t\ttmp = back.ack;\n\t\t\t\t\t\tif(!tmp){ back.ack = -1 }\n\t\t\t\t\t\tif(obj_has(back, 'put')){\n\t\t\t\t\t\t\tback.on('in', back);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(tmp){ return }\n\t\t\t\t\t\tmsg.$ = back.$;\n\t\t\t\t\t} else\n\t\t\t\t\tif(obj_has(back.put, get)){ // TODO: support #LEX !\n\t\t\t\t\t\tput = (back.$.get(get)._);\n\t\t\t\t\t\tif(!(tmp = put.ack)){ put.ack = -1 }\n\t\t\t\t\t\tback.on('in', {\n\t\t\t\t\t\t\t$: back.$,\n\t\t\t\t\t\t\tput: Gun.state.to(back.put, get),\n\t\t\t\t\t\t\tget: back.get\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif(tmp){ return }\n\t\t\t\t\t} else\n\t\t\t\t\tif('string' != typeof get){\n\t\t\t\t\t\tvar put = {}, meta = (back.put||{})._;\n\t\t\t\t\t\tGun.obj.map(back.put, function(v,k){\n\t\t\t\t\t\t\tif(!Gun.text.match(k, get)){ return }\n\t\t\t\t\t\t\tput[k] = v;\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif(!Gun.obj.empty(put)){\n\t\t\t\t\t\t\tput._ = meta;\n\t\t\t\t\t\t\tback.on('in', {$: back.$, put: put, get: back.get})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\troot.ask(ack, msg);\n\t\t\t\t\treturn root.on('in', msg);\n\t\t\t\t}\n\t\t\t\tif(root.now){ root.now[at.id] = root.now[at.id] || true; at.pass = {} }\n\t\t\t\tif(get['.']){\n\t\t\t\t\tif(at.get){\n\t\t\t\t\t\tmsg = {get: {'.': at.get}, $: at.$};\n\t\t\t\t\t\t//if(back.ask || (back.ask = {})[at.get]){ return }\n\t\t\t\t\t\t(back.ask || (back.ask = {}));\n\t\t\t\t\t\tback.ask[at.get] = msg.$._; // TODO: PERFORMANCE? More elegant way?\n\t\t\t\t\t\treturn back.on('out', msg);\n\t\t\t\t\t}\n\t\t\t\t\tmsg = {get: {}, $: at.$};\n\t\t\t\t\treturn back.on('out', msg);\n\t\t\t\t}\n\t\t\t\tat.ack = at.ack || -1;\n\t\t\t\tif(at.get){\n\t\t\t\t\tmsg.$ = at.$;\n\t\t\t\t\tget['.'] = at.get;\n\t\t\t\t\t(back.ask || (back.ask = {}))[at.get] = msg.$._; // TODO: PERFORMANCE? More elegant way?\n\t\t\t\t\treturn back.on('out', msg);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn back.on('out', msg);\n\t\t}\n\n\t\tfunction input(msg){\n\t\t\tvar eve = this, cat = eve.as, root = cat.root, gun = msg.$, at = (gun||empty)._ || empty, change = msg.put, rel, tmp;\n\t\t\tif(cat.get && msg.get !== cat.get){\n\t\t\t\tmsg = obj_to(msg, {get: cat.get});\n\t\t\t}\n\t\t\tif(cat.has && at !== cat){\n\t\t\t\tmsg = obj_to(msg, {$: cat.$});\n\t\t\t\tif(at.ack){\n\t\t\t\t\tcat.ack = at.ack;\n\t\t\t\t\t//cat.ack = cat.ack || at.ack;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u === change){\n\t\t\t\ttmp = at.put;\n\t\t\t\teve.to.next(msg);\n\t\t\t\tif(cat.soul){ return } // TODO: BUG, I believee the fresh input refactor caught an edge case that a `gun.get('soul').get('key')` that points to a soul that doesn't exist will not trigger val/get etc.\n\t\t\t\tif(u === tmp && u !== at.put){ return }\n\t\t\t\techo(cat, msg, eve);\n\t\t\t\tif(cat.has){\n\t\t\t\t\tnot(cat, msg);\n\t\t\t\t}\n\t\t\t\tobj_del(at.echo, cat.id);\n\t\t\t\tobj_del(cat.map, at.id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(cat.soul){\n\t\t\t\teve.to.next(msg);\n\t\t\t\techo(cat, msg, eve);\n\t\t\t\tif(cat.next){ obj_map(change, map, {msg: msg, cat: cat}) }\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!(rel = Gun.val.link.is(change))){\n\t\t\t\tif(Gun.val.is(change)){\n\t\t\t\t\tif(cat.has || cat.soul){\n\t\t\t\t\t\tnot(cat, msg);\n\t\t\t\t\t} else\n\t\t\t\t\tif(at.has || at.soul){\n\t\t\t\t\t\t(at.echo || (at.echo = {}))[cat.id] = at.echo[at.id] || cat;\n\t\t\t\t\t\t(cat.map || (cat.map = {}))[at.id] = cat.map[at.id] || {at: at};\n\t\t\t\t\t\t//if(u === at.put){ return } // Not necessary but improves performance. If we have it but at does not, that means we got things out of order and at will get it. Once at gets it, it will tell us again.\n\t\t\t\t\t}\n\t\t\t\t\teve.to.next(msg);\n\t\t\t\t\techo(cat, msg, eve);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(cat.has && at !== cat && obj_has(at, 'put')){\n\t\t\t\t\tcat.put = at.put;\n\t\t\t\t};\n\t\t\t\tif((rel = Gun.node.soul(change)) && at.has){\n\t\t\t\t\tat.put = (cat.root.$.get(rel)._).put;\n\t\t\t\t}\n\t\t\t\ttmp = (root.stop || {})[at.id];\n\t\t\t\t//if(tmp && tmp[cat.id]){ } else {\n\t\t\t\t\teve.to.next(msg);\n\t\t\t\t//}\n\t\t\t\trelate(cat, msg, at, rel);\n\t\t\t\techo(cat, msg, eve);\n\t\t\t\tif(cat.next){ obj_map(change, map, {msg: msg, cat: cat}) }\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar was = root.stop;\n\t\t\ttmp = root.stop || {};\n\t\t\ttmp = tmp[at.id] || (tmp[at.id] = {});\n\t\t\t//if(tmp[cat.id]){ return }\n\t\t\ttmp.is = tmp.is || at.put;\n\t\t\ttmp[cat.id] = at.put || true;\n\t\t\t//if(root.stop){\n\t\t\t\teve.to.next(msg)\n\t\t\t//}\n\t\t\trelate(cat, msg, at, rel);\n\t\t\techo(cat, msg, eve);\n\t\t}\n\n\t\tfunction relate(at, msg, from, rel){\n\t\t\tif(!rel || node_ === at.get){ return }\n\t\t\tvar tmp = (at.root.$.get(rel)._);\n\t\t\tif(at.has){\n\t\t\t\tfrom = tmp;\n\t\t\t} else\n\t\t\tif(from.has){\n\t\t\t\trelate(from, msg, from, rel);\n\t\t\t}\n\t\t\tif(from === at){ return }\n\t\t\tif(!from.$){ from = {} }\n\t\t\t(from.echo || (from.echo = {}))[at.id] = from.echo[at.id] || at;\n\t\t\tif(at.has && !(at.map||empty)[from.id]){ // if we haven't seen this before.\n\t\t\t\tnot(at, msg);\n\t\t\t}\n\t\t\ttmp = from.id? ((at.map || (at.map = {}))[from.id] = at.map[from.id] || {at: from}) : {};\n\t\t\tif(rel === tmp.link){\n\t\t\t\tif(!(tmp.pass || at.pass)){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(at.pass){\n\t\t\t\tGun.obj.map(at.map, function(tmp){ tmp.pass = true })\n\t\t\t\tobj_del(at, 'pass');\n\t\t\t}\n\t\t\tif(tmp.pass){ obj_del(tmp, 'pass') }\n\t\t\tif(at.has){ at.link = rel }\n\t\t\task(at, tmp.link = rel);\n\t\t}\n\t\tfunction echo(at, msg, ev){\n\t\t\tif(!at.echo){ return } // || node_ === at.get ?\n\t\t\t//if(at.has){ msg = obj_to(msg, {event: ev}) }\n\t\t\tobj_map(at.echo, reverb, msg);\n\t\t}\n\t\tfunction reverb(to){\n\t\t\tif(!to || !to.on){ return }\n\t\t\tto.on('in', this);\n\t\t}\n\t\tfunction map(data, key){ // Map over only the changes on every update.\n\t\t\tvar cat = this.cat, next = cat.next || empty, via = this.msg, chain, at, tmp;\n\t\t\tif(node_ === key && !next[key]){ return }\n\t\t\tif(!(at = next[key])){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//if(data && data[_soul] && (tmp = Gun.val.link.is(data)) && (tmp = (cat.root.$.get(tmp)._)) && obj_has(tmp, 'put')){\n\t\t\t//\tdata = tmp.put;\n\t\t\t//}\n\t\t\tif(at.has){\n\t\t\t\t//if(!(data && data[_soul] && Gun.val.link.is(data) === Gun.node.soul(at.put))){\n\t\t\t\tif(u === at.put || !Gun.val.link.is(data)){\n\t\t\t\t\tat.put = data;\n\t\t\t\t}\n\t\t\t\tchain = at.$;\n\t\t\t} else\n\t\t\tif(tmp = via.$){\n\t\t\t\ttmp = (chain = via.$.get(key))._;\n\t\t\t\tif(u === tmp.put || !Gun.val.link.is(data)){\n\t\t\t\t\ttmp.put = data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tat.on('in', {\n\t\t\t\tput: data,\n\t\t\t\tget: key,\n\t\t\t\t$: chain,\n\t\t\t\tvia: via\n\t\t\t});\n\t\t}\n\t\tfunction not(at, msg){\n\t\t\tif(!(at.has || at.soul)){ return }\n\t\t\tvar tmp = at.map, root = at.root;\n\t\t\tat.map = null;\n\t\t\tif(at.has){\n\t\t\t\tif(at.dub && at.root.stop){ at.dub = null }\n\t\t\t\tat.link = null;\n\t\t\t}\n\t\t\t//if(!root.now || !root.now[at.id]){\n\t\t\tif(!at.pass){\n\t\t\t\tif((!msg['@']) && null === tmp){ return }\n\t\t\t\t//obj_del(at, 'pass');\n\t\t\t}\n\t\t\tif(u === tmp && Gun.val.link.is(at.put)){ return } // This prevents the very first call of a thing from triggering a \"clean up\" call. // TODO: link.is(at.put) || !val.is(at.put) ?\n\t\t\tobj_map(tmp, function(proxy){\n\t\t\t\tif(!(proxy = proxy.at)){ return }\n\t\t\t\tobj_del(proxy.echo, at.id);\n\t\t\t});\n\t\t\ttmp = at.put;\n\t\t\tobj_map(at.next, function(neat, key){\n\t\t\t\tif(u === tmp && u !== at.put){ return true }\n\t\t\t\tneat.put = u;\n\t\t\t\tif(neat.ack){\n\t\t\t\t\tneat.ack = -1; // TODO: BUG? Should this be 0?\n\t\t\t\t}\n\t\t\t\tneat.on('in', {\n\t\t\t\t\tget: key,\n\t\t\t\t\t$: neat.$,\n\t\t\t\t\tput: u\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tfunction ask(at, soul){\n\t\t\tvar tmp = (at.root.$.get(soul)._), lex = at.lex;\n\t\t\tif(at.ack || lex){\n\t\t\t\t(lex = lex||{})['#'] = soul;\n\t\t\t\ttmp.on('out', {get: lex});\n\t\t\t\tif(!at.ask){ return } // TODO: PERFORMANCE? More elegant way?\n\t\t\t}\n\t\t\ttmp = at.ask; Gun.obj.del(at, 'ask');\n\t\t\tobj_map(tmp || at.next, function(neat, key){\n\t\t\t\tvar lex = neat.lex || {}; lex['#'] = soul; lex['.'] = lex['.'] || key;\n\t\t\t\tneat.on('out', {get: lex});\n\t\t\t});\n\t\t\tGun.obj.del(at, 'ask'); // TODO: PERFORMANCE? More elegant way?\n\t\t}\n\t\tfunction ack(msg, ev){\n\t\t\tvar as = this.as, get = as.get || empty, at = as.$._, tmp = (msg.put||empty)[get['#']];\n\t\t\tif(at.ack){ at.ack = (at.ack + 1) || 1; }\n\t\t\tif(!msg.put || ('string' == typeof get['.'] && !obj_has(tmp, at.get))){\n\t\t\t\tif(at.put !== u){ return }\n\t\t\t\tat.on('in', {\n\t\t\t\t\tget: at.get,\n\t\t\t\t\tput: at.put = u,\n\t\t\t\t\t$: at.$,\n\t\t\t\t\t'@': msg['@']\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(node_ == get['.']){ // is this a security concern?\n\t\t\t\tat.on('in', {get: at.get, put: Gun.val.link.ify(get['#']), $: at.$, '@': msg['@']});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tGun.on.put(msg, at.root.$);\n\t\t}\n\t\tvar empty = {}, u;\n\t\tvar obj = Gun.obj, obj_has = obj.has, obj_put = obj.put, obj_del = obj.del, obj_to = obj.to, obj_map = obj.map;\n\t\tvar text_rand = Gun.text.random;\n\t\tvar _soul = Gun.val.link._, node_ = Gun.node._;\n\t})(USE, './chain');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./root');\n\t\tGun.chain.get = function(key, cb, as){\n\t\t\tvar gun, tmp;\n\t\t\tif(typeof key === 'string'){\n\t\t\t\tvar back = this, cat = back._;\n\t\t\t\tvar next = cat.next || empty;\n\t\t\t\tif(!(gun = next[key])){\n\t\t\t\t\tgun = cache(key, back);\n\t\t\t\t}\n\t\t\t\tgun = gun.$;\n\t\t\t} else\n\t\t\tif(key instanceof Function){\n\t\t\t\tif(true === cb){ return soul(this, key, cb, as) }\n\t\t\t\tgun = this;\n\t\t\t\tvar at = gun._, root = at.root, tmp = root.now, ev;\n\t\t\t\tas = cb || {};\n\t\t\t\tas.at = at;\n\t\t\t\tas.use = key;\n\t\t\t\tas.out = as.out || {};\n\t\t\t\tas.out.get = as.out.get || {};\n\t\t\t\t(ev = at.on('in', use, as)).rid = rid;\n\t\t\t\t(root.now = {$:1})[as.now = at.id] = ev;\n\t\t\t\tvar mum = root.mum; root.mum = {};\n\t\t\t\tat.on('out', as.out);\n\t\t\t\troot.mum = mum;\n\t\t\t\troot.now = tmp;\n\t\t\t\treturn gun;\n\t\t\t} else\n\t\t\tif(num_is(key)){\n\t\t\t\treturn this.get(''+key, cb, as);\n\t\t\t} else\n\t\t\tif(tmp = rel.is(key)){\n\t\t\t\treturn this.get(tmp, cb, as);\n\t\t\t} else\n\t\t\tif(obj.is(key)){\n\t\t\t\tgun = this;\n\t\t\t\tif(tmp = ((tmp = key['#'])||empty)['='] || tmp){ gun = gun.get(tmp) }\n\t\t\t\tgun._.lex = key;\n\t\t\t\treturn gun;\n\t\t\t} else {\n\t\t\t\t(as = this.chain())._.err = {err: Gun.log('Invalid get request!', key)}; // CLEAN UP\n\t\t\t\tif(cb){ cb.call(as, as._.err) }\n\t\t\t\treturn as;\n\t\t\t}\n\t\t\tif(tmp = this._.stun){ // TODO: Refactor?\n\t\t\t\tgun._.stun = gun._.stun || tmp;\n\t\t\t}\n\t\t\tif(cb && cb instanceof Function){\n\t\t\t\tgun.get(cb, as);\n\t\t\t}\n\t\t\treturn gun;\n\t\t}\n\t\tfunction cache(key, back){\n\t\t\tvar cat = back._, next = cat.next, gun = back.chain(), at = gun._;\n\t\t\tif(!next){ next = cat.next = {} }\n\t\t\tnext[at.get = key] = at;\n\t\t\tif(back === cat.root.$){\n\t\t\t\tat.soul = key;\n\t\t\t} else\n\t\t\tif(cat.soul || cat.has){\n\t\t\t\tat.has = key;\n\t\t\t\t//if(obj_has(cat.put, key)){\n\t\t\t\t\t//at.put = cat.put[key];\n\t\t\t\t//}\n\t\t\t}\n\t\t\treturn at;\n\t\t}\n\t\tfunction soul(gun, cb, opt, as){\n\t\t\tvar cat = gun._, acks = 0, tmp;\n\t\t\tif(tmp = cat.soul || cat.link || cat.dub){ return cb(tmp, as, cat), gun }\n\t\t\tgun.get(function(msg, ev){\n\t\t\t\tif(u === msg.put && (tmp = Object.keys(cat.root.opt.peers).length) && ++acks < tmp){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tev.rid(msg);\n\t\t\t\tvar at = ((at = msg.$) && at._) || {};\n\t\t\t\ttmp = at.link || at.soul || rel.is(msg.put) || node_soul(msg.put) || at.dub;\n\t\t\t\tcb(tmp, as, msg, ev);\n\t\t\t}, {out: {get: {'.':true}}});\n\t\t\treturn gun;\n\t\t}\n\t\tfunction use(msg){\n\t\t\tvar eve = this, as = eve.as, cat = as.at, root = cat.root, gun = msg.$, at = (gun||{})._ || {}, data = msg.put || at.put, tmp;\n\t\t\tif((tmp = root.now) && eve !== tmp[as.now]){ return eve.to.next(msg) }\n\t\t\t//console.log(\"USE:\", cat.id, cat.soul, cat.has, cat.get, msg, root.mum);\n\t\t\t//if(at.async && msg.root){ return }\n\t\t\t//if(at.async === 1 && cat.async !== true){ return }\n\t\t\t//if(root.stop && root.stop[at.id]){ return } root.stop && (root.stop[at.id] = true);\n\t\t\t//if(!at.async && !cat.async && at.put && msg.put === at.put){ return }\n\t\t\t//else if(!cat.async && msg.put !== at.put && root.stop && root.stop[at.id]){ return } root.stop && (root.stop[at.id] = true);\n\n\n\t\t\t//root.stop && (root.stop.id = root.stop.id || Gun.text.random(2));\n\t\t\t//if((tmp = root.stop) && (tmp = tmp[at.id] || (tmp[at.id] = {})) && tmp[cat.id]){ return } tmp && (tmp[cat.id] = true);\n\t\t\tif(eve.seen && at.id && eve.seen[at.id]){ return eve.to.next(msg) }\n\t\t\t//if((tmp = root.stop)){ if(tmp[at.id]){ return } tmp[at.id] = msg.root; } // temporary fix till a better solution?\n\t\t\tif((tmp = data) && tmp[rel._] && (tmp = rel.is(tmp))){\n\t\t\t\ttmp = ((msg.$$ = at.root.gun.get(tmp))._);\n\t\t\t\tif(u !== tmp.put){\n\t\t\t\t\tmsg = obj_to(msg, {put: data = tmp.put});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((tmp = root.mum) && at.id){ // TODO: can we delete mum entirely now?\n\t\t\t\tvar id = at.id + (eve.id || (eve.id = Gun.text.random(9)));\n\t\t\t\tif(tmp[id]){ return }\n\t\t\t\tif(u !== data && !rel.is(data)){ tmp[id] = true; }\n\t\t\t}\n\t\t\tas.use(msg, eve);\n\t\t\tif(eve.stun){\n\t\t\t\teve.stun = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\teve.to.next(msg);\n\t\t}\n\t\tfunction rid(at){\n\t\t\tvar cat = this.on;\n\t\t\tif(!at || cat.soul || cat.has){ return this.off() }\n\t\t\tif(!(at = (at = (at = at.$ || at)._ || at).id)){ return }\n\t\t\tvar map = cat.map, tmp, seen;\n\t\t\t//if(!map || !(tmp = map[at]) || !(tmp = tmp.at)){ return }\n\t\t\tif(tmp = (seen = this.seen || (this.seen = {}))[at]){ return true }\n\t\t\tseen[at] = true;\n\t\t\treturn;\n\t\t\t//tmp.echo[cat.id] = {}; // TODO: Warning: This unsubscribes ALL of this chain's listeners from this link, not just the one callback event.\n\t\t\t//obj.del(map, at); // TODO: Warning: This unsubscribes ALL of this chain's listeners from this link, not just the one callback event.\n\t\t\treturn;\n\t\t}\n\t\tvar obj = Gun.obj, obj_map = obj.map, obj_has = obj.has, obj_to = Gun.obj.to;\n\t\tvar num_is = Gun.num.is;\n\t\tvar rel = Gun.val.link, node_soul = Gun.node.soul, node_ = Gun.node._;\n\t\tvar empty = {}, u;\n\t})(USE, './get');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./root');\n\t\tGun.chain.put = function(data, cb, as){\n\t\t\t// #soul.has=value>state\n\t\t\t// ~who#where.where=what>when@was\n\t\t\t// TODO: BUG! Put probably cannot handle plural chains!\n\t\t\tvar gun = this, at = (gun._), root = at.root.$, ctx = root._, M = 100, tmp;\n\t\t\tif(!ctx.puta){ if(tmp = ctx.puts){ if(tmp > M){ // without this, when synchronous, writes to a 'not found' pile up, when 'not found' resolves it recursively calls `put` which incrementally resolves each write. Stack overflow limits can be as low as 10K, so this limit is hardcoded to 1% of 10K.\n\t\t\t\t(ctx.stack || (ctx.stack = [])).push([gun, data, cb, as]);\n\t\t\t\tif(ctx.puto){ return }\n\t\t\t\tctx.puto = setTimeout(function drain(){\n\t\t\t\t\tvar d = ctx.stack.splice(0,M), i = 0, at; ctx.puta = true;\n\t\t\t\t\twhile(at = d[i++]){ at[0].put(at[1], at[2], at[3]) } delete ctx.puta;\n\t\t\t\t\tif(ctx.stack.length){ return ctx.puto = setTimeout(drain, 0) }\n\t\t\t\t\tctx.stack = ctx.puts = ctx.puto = null;\n\t\t\t\t}, 0);\n\t\t\t\treturn gun;\n\t\t\t} ++ctx.puts } else { ctx.puts = 1 } }\n\t\t\tas = as || {};\n\t\t\tas.data = data;\n\t\t\tas.via = as.$ = as.via || as.$ || gun;\n\t\t\tif(typeof cb === 'string'){\n\t\t\t\tas.soul = cb;\n\t\t\t} else {\n\t\t\t\tas.ack = as.ack || cb;\n\t\t\t}\n\t\t\tif(at.soul){\n\t\t\t\tas.soul = at.soul;\n\t\t\t}\n\t\t\tif(as.soul || root === gun){\n\t\t\t\tif(!obj_is(as.data)){\n\t\t\t\t\t(as.ack||noop).call(as, as.out = {err: Gun.log(\"Data saved to the root level of the graph must be a node (an object), not a\", (typeof as.data), 'of \"' + as.data + '\"!')});\n\t\t\t\t\tif(as.res){ as.res() }\n\t\t\t\t\treturn gun;\n\t\t\t\t}\n\t\t\t\tas.soul = as.soul || (as.not = Gun.node.soul(as.data) || (as.via.back('opt.uuid') || Gun.text.random)());\n\t\t\t\tif(!as.soul){ // polyfill async uuid for SEA\n\t\t\t\t\tas.via.back('opt.uuid')(function(err, soul){ // TODO: improve perf without anonymous callback\n\t\t\t\t\t\tif(err){ return Gun.log(err) } // TODO: Handle error!\n\t\t\t\t\t\t(as.ref||as.$).put(as.data, as.soul = soul, as);\n\t\t\t\t\t});\n\t\t\t\t\treturn gun;\n\t\t\t\t}\n\t\t\t\tas.$ = root.get(as.soul);\n\t\t\t\tas.ref = as.$;\n\t\t\t\tify(as);\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t\tif(Gun.is(data)){\n\t\t\t\tdata.get(function(soul, o, msg){\n\t\t\t\t\tif(!soul){\n\t\t\t\t\t\treturn Gun.log(\"The reference you are saving is a\", typeof msg.put, '\"'+ msg.put +'\", not a node (object)!');\n\t\t\t\t\t}\n\t\t\t\t\tgun.put(Gun.val.link.ify(soul), cb, as);\n\t\t\t\t}, true);\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t\tif(at.has && (tmp = Gun.val.link.is(data))){ at.dub = tmp }\n\t\t\tas.ref = as.ref || (root._ === (tmp = at.back))? gun : tmp.$;\n\t\t\tif(as.ref._.soul && Gun.val.is(as.data) && at.get){\n\t\t\t\tas.data = obj_put({}, at.get, as.data);\n\t\t\t\tas.ref.put(as.data, as.soul, as);\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t\tas.ref.get(any, true, {as: as});\n\t\t\tif(!as.out){\n\t\t\t\t// TODO: Perf idea! Make a global lock, that blocks everything while it is on, but if it is on the lock it does the expensive lookup to see if it is a dependent write or not and if not then it proceeds full speed. Meh? For write heavy async apps that would be terrible.\n\t\t\t\tas.res = as.res || stun; // Gun.on.stun(as.ref); // TODO: BUG! Deal with locking?\n\t\t\t\tas.$._.stun = as.ref._.stun;\n\t\t\t}\n\t\t\treturn gun;\n\t\t};\n\n\t\tfunction ify(as){\n\t\t\tas.batch = batch;\n\t\t\tvar opt = as.opt||{}, env = as.env = Gun.state.map(map, opt.state);\n\t\t\tenv.soul = as.soul;\n\t\t\tas.graph = Gun.graph.ify(as.data, env, as);\n\t\t\tif(env.err){\n\t\t\t\t(as.ack||noop).call(as, as.out = {err: Gun.log(env.err)});\n\t\t\t\tif(as.res){ as.res() }\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tas.batch();\n\t\t}\n\n\t\tfunction stun(cb){\n\t\t\tif(cb){ cb() }\n\t\t\treturn;\n\t\t\tvar as = this;\n\t\t\tif(!as.ref){ return }\n\t\t\tif(cb){\n\t\t\t\tas.after = as.ref._.tag;\n\t\t\t\tas.now = as.ref._.tag = {};\n\t\t\t\tcb();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(as.after){\n\t\t\t\tas.ref._.tag = as.after;\n\t\t\t}\n\t\t}\n\n\t\tfunction batch(){ var as = this;\n\t\t\tif(!as.graph || obj_map(as.stun, no)){ return }\n\t\t\tas.res = as.res || function(cb){ if(cb){ cb() } };\n\t\t\tas.res(function(){\n\t\t\t\tvar cat = (as.$.back(-1)._), ask = cat.ask(function(ack){\n\t\t\t\t\tcat.root.on('ack', ack);\n\t\t\t\t\tif(ack.err){ Gun.log(ack) }\n\t\t\t\t\tif(++acks > (as.acks || 0)){ this.off() } // Adjustable ACKs! Only 1 by default.\n\t\t\t\t\tif(!as.ack){ return }\n\t\t\t\t\tas.ack(ack, this);\n\t\t\t\t\t//--C;\n\t\t\t\t}, as.opt), acks = 0;\n\t\t\t\t//C++;\n\t\t\t\t// NOW is a hack to get synchronous replies to correctly call.\n\t\t\t\t// and STOP is a hack to get async behavior to correctly call.\n\t\t\t\t// neither of these are ideal, need to be fixed without hacks,\n\t\t\t\t// but for now, this works for current tests. :/\n\t\t\t\tvar tmp = cat.root.now; obj.del(cat.root, 'now');\n\t\t\t\tvar mum = cat.root.mum; cat.root.mum = {};\n\t\t\t\t(as.ref._).on('out', {\n\t\t\t\t\t$: as.ref, put: as.out = as.env.graph, opt: as.opt, '#': ask\n\t\t\t\t});\n\t\t\t\tcat.root.mum = mum? obj.to(mum, cat.root.mum) : mum;\n\t\t\t\tcat.root.now = tmp;\n\t\t\t}, as);\n\t\t\tif(as.res){ as.res() }\n\t\t} function no(v,k){ if(v){ return true } }\n\n\t\tfunction map(v,k,n, at){ var as = this;\n\t\t\tvar is = Gun.is(v);\n\t\t\tif(k || !at.path.length){ return }\n\t\t\t(as.res||iife)(function(){\n\t\t\t\tvar path = at.path, ref = as.ref, opt = as.opt;\n\t\t\t\tvar i = 0, l = path.length;\n\t\t\t\tfor(i; i < l; i++){\n\t\t\t\t\tref = ref.get(path[i]);\n\t\t\t\t}\n\t\t\t\tif(is){ ref = v }\n\t\t\t\tvar id = (ref._).dub;\n\t\t\t\tif(id || (id = Gun.node.soul(at.obj))){\n\t\t\t\t\tref.back(-1).get(id);\n\t\t\t\t\tat.soul(id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t(as.stun = as.stun || {})[path] = true;\n\t\t\t\tref.get(soul, true, {as: {at: at, as: as, p:path}});\n\t\t\t}, {as: as, at: at});\n\t\t\t//if(is){ return {} }\n\t\t}\n\n\t\tfunction soul(id, as, msg, eve){\n\t\t\tvar as = as.as, cat = as.at; as = as.as;\n\t\t\tvar at = ((msg || {}).$ || {})._ || {};\n\t\t\tid = at.dub = at.dub || id || Gun.node.soul(cat.obj) || Gun.node.soul(msg.put || at.put) || Gun.val.link.is(msg.put || at.put) || (as.via.back('opt.uuid') || Gun.text.random)(); // TODO: BUG!? Do we really want the soul of the object given to us? Could that be dangerous?\n\t\t\tif(eve){ eve.stun = true }\n\t\t\tif(!id){ // polyfill async uuid for SEA\n\t\t\t\tas.via.back('opt.uuid')(function(err, id){ // TODO: improve perf without anonymous callback\n\t\t\t\t\tif(err){ return Gun.log(err) } // TODO: Handle error.\n\t\t\t\t\tsolve(at, at.dub = at.dub || id, cat, as);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsolve(at, at.dub = id, cat, as);\n\t\t}\n\n\t\tfunction solve(at, id, cat, as){\n\t\t\tat.$.back(-1).get(id);\n\t\t\tcat.soul(id);\n\t\t\tas.stun[cat.path] = false;\n\t\t\tas.batch();\n\t\t}\n\n\t\tfunction any(soul, as, msg, eve){\n\t\t\tas = as.as;\n\t\t\tif(!msg.$ || !msg.$._){ return } // TODO: Handle\n\t\t\tif(msg.err){ // TODO: Handle\n\t\t\t\tconsole.log(\"Please report this as an issue! Put.any.err\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar at = (msg.$._), data = at.put, opt = as.opt||{}, root, tmp;\n\t\t\tif((tmp = as.ref) && tmp._.now){ return }\n\t\t\tif(eve){ eve.stun = true }\n\t\t\tif(as.ref !== as.$){\n\t\t\t\ttmp = (as.$._).get || at.get;\n\t\t\t\tif(!tmp){ // TODO: Handle\n\t\t\t\t\tconsole.log(\"Please report this as an issue! Put.no.get\"); // TODO: BUG!??\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tas.data = obj_put({}, tmp, as.data);\n\t\t\t\ttmp = null;\n\t\t\t}\n\t\t\tif(u === data){\n\t\t\t\tif(!at.get){ return } // TODO: Handle\n\t\t\t\tif(!soul){\n\t\t\t\t\ttmp = at.$.back(function(at){\n\t\t\t\t\t\tif(at.link || at.soul){ return at.link || at.soul }\n\t\t\t\t\t\tas.data = obj_put({}, at.get, as.data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\ttmp = tmp || at.soul || at.link || at.dub;// || at.get;\n\t\t\t\tat = tmp? (at.root.$.get(tmp)._) : at;\n\t\t\t\tas.soul = tmp;\n\t\t\t\tdata = as.data;\n\t\t\t}\n\t\t\tif(!as.not && !(as.soul = as.soul || soul)){\n\t\t\t\tif(as.path && obj_is(as.data)){\n\t\t\t\t\tas.soul = (opt.uuid || as.via.back('opt.uuid') || Gun.text.random)();\n\t\t\t\t} else {\n\t\t\t\t\t//as.data = obj_put({}, as.$._.get, as.data);\n\t\t\t\t\tif(node_ == at.get){\n\t\t\t\t\t\tas.soul = (at.put||empty)['#'] || at.dub;\n\t\t\t\t\t}\n\t\t\t\t\tas.soul = as.soul || at.soul || at.link || (opt.uuid || as.via.back('opt.uuid') || Gun.text.random)();\n\t\t\t\t}\n\t\t\t\tif(!as.soul){ // polyfill async uuid for SEA\n\t\t\t\t\tas.via.back('opt.uuid')(function(err, soul){ // TODO: improve perf without anonymous callback\n\t\t\t\t\t\tif(err){ return Gun.log(err) } // Handle error.\n\t\t\t\t\t\tas.ref.put(as.data, as.soul = soul, as);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tas.ref.put(as.data, as.soul, as);\n\t\t}\n\t\tvar obj = Gun.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;\n\t\tvar u, empty = {}, noop = function(){}, iife = function(fn,as){fn.call(as||empty)};\n\t\tvar node_ = Gun.node._;\n\t})(USE, './put');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./root');\n\t\tUSE('./chain');\n\t\tUSE('./back');\n\t\tUSE('./put');\n\t\tUSE('./get');\n\t\tmodule.exports = Gun;\n\t})(USE, './index');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./index');\n\t\tGun.chain.on = function(tag, arg, eas, as){\n\t\t\tvar gun = this, at = gun._, tmp, act, off;\n\t\t\tif(typeof tag === 'string'){\n\t\t\t\tif(!arg){ return at.on(tag) }\n\t\t\t\tact = at.on(tag, arg, eas || at, as);\n\t\t\t\tif(eas && eas.$){\n\t\t\t\t\t(eas.subs || (eas.subs = [])).push(act);\n\t\t\t\t}\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t\tvar opt = arg;\n\t\t\topt = (true === opt)? {change: true} : opt || {};\n\t\t\topt.at = at;\n\t\t\topt.ok = tag;\n\t\t\t//opt.last = {};\n\t\t\tgun.get(ok, opt); // TODO: PERF! Event listener leak!!!?\n\t\t\treturn gun;\n\t\t}\n\n\t\tfunction ok(msg, ev){ var opt = this;\n\t\t\tvar gun = msg.$, at = (gun||{})._ || {}, data = at.put || msg.put, cat = opt.at, tmp;\n\t\t\tif(u === data){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(tmp = msg.$$){\n\t\t\t\ttmp = (msg.$$._);\n\t\t\t\tif(u === tmp.put){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdata = tmp.put;\n\t\t\t}\n\t\t\tif(opt.change){ // TODO: BUG? Move above the undef checks?\n\t\t\t\tdata = msg.put;\n\t\t\t}\n\t\t\t// DEDUPLICATE // TODO: NEEDS WORK! BAD PROTOTYPE\n\t\t\t//if(tmp.put === data && tmp.get === id && !Gun.node.soul(data)){ return }\n\t\t\t//tmp.put = data;\n\t\t\t//tmp.get = id;\n\t\t\t// DEDUPLICATE // TODO: NEEDS WORK! BAD PROTOTYPE\n\t\t\t//at.last = data;\n\t\t\tif(opt.as){\n\t\t\t\topt.ok.call(opt.as, msg, ev);\n\t\t\t} else {\n\t\t\t\topt.ok.call(gun, data, msg.get, msg, ev);\n\t\t\t}\n\t\t}\n\n\t\tGun.chain.val = function(cb, opt){\n\t\t\tGun.log.once(\"onceval\", \"Future Breaking API Change: .val -> .once, apologies unexpected.\");\n\t\t\treturn this.once(cb, opt);\n\t\t}\n\t\tGun.chain.once = function(cb, opt){\n\t\t\tvar gun = this, at = gun._, data = at.put;\n\t\t\tif(0 < at.ack && u !== data){\n\t\t\t\t(cb || noop).call(gun, data, at.get);\n\t\t\t\treturn gun;\n\t\t\t}\n\t\t\tif(cb){\n\t\t\t\t(opt = opt || {}).ok = cb;\n\t\t\t\topt.at = at;\n\t\t\t\topt.out = {'#': Gun.text.random(9)};\n\t\t\t\tgun.get(val, {as: opt});\n\t\t\t\topt.async = true; //opt.async = at.stun? 1 : true;\n\t\t\t} else {\n\t\t\t\tGun.log.once(\"valonce\", \"Chainable val is experimental, its behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.\");\n\t\t\t\tvar chain = gun.chain();\n\t\t\t\tchain._.nix = gun.once(function(){\n\t\t\t\t\tchain._.on('in', gun._);\n\t\t\t\t});\n\t\t\t\treturn chain;\n\t\t\t}\n\t\t\treturn gun;\n\t\t}\n\n\t\tfunction val(msg, eve, to){\n\t\t\tif(!msg.$){ eve.off(); return }\n\t\t\tvar opt = this.as, cat = opt.at, gun = msg.$, at = gun._, data = at.put || msg.put, link, tmp;\n\t\t\tif(tmp = msg.$$){\n\t\t\t\tlink = tmp = (msg.$$._);\n\t\t\t\tif(u !== link.put){\n\t\t\t\t\tdata = link.put;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((tmp = eve.wait) && (tmp = tmp[at.id])){ clearTimeout(tmp) }\n\t\t\teve.ack = (eve.ack||0)+1;\n\t\t\tif(!to && u === data && eve.ack <= (opt.acks || Object.keys(at.root.opt.peers).length)){ return }\n\t\t\tif((!to && (u === data || at.soul || at.link || (link && !(0 < link.ack))))\n\t\t\t|| (u === data && (tmp = Object.keys(at.root.opt.peers).length) && (!to && (link||at).ack < tmp))){\n\t\t\t\ttmp = (eve.wait = {})[at.id] = setTimeout(function(){\n\t\t\t\t\tval.call({as:opt}, msg, eve, tmp || 1);\n\t\t\t\t}, opt.wait || 99);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(link && u === link.put && (tmp = rel.is(data))){ data = Gun.node.ify({}, tmp) }\n\t\t\teve.rid(msg);\n\t\t\topt.ok.call(gun || opt.$, data, msg.get);\n\t\t}\n\n\t\tGun.chain.off = function(){\n\t\t\t// make off more aggressive. Warning, it might backfire!\n\t\t\tvar gun = this, at = gun._, tmp;\n\t\t\tvar cat = at.back;\n\t\t\tif(!cat){ return }\n\t\t\tat.ack = 0; // so can resubscribe.\n\t\t\tif(tmp = cat.next){\n\t\t\t\tif(tmp[at.get]){\n\t\t\t\t\tobj_del(tmp, at.get);\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tmp = cat.ask){\n\t\t\t\tobj_del(tmp, at.get);\n\t\t\t}\n\t\t\tif(tmp = cat.put){\n\t\t\t\tobj_del(tmp, at.get);\n\t\t\t}\n\t\t\tif(tmp = at.soul){\n\t\t\t\tobj_del(cat.root.graph, tmp);\n\t\t\t}\n\t\t\tif(tmp = at.map){\n\t\t\t\tobj_map(tmp, function(at){\n\t\t\t\t\tif(at.link){\n\t\t\t\t\t\tcat.root.$.get(at.link).off();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif(tmp = at.next){\n\t\t\t\tobj_map(tmp, function(neat){\n\t\t\t\t\tneat.$.off();\n\t\t\t\t});\n\t\t\t}\n\t\t\tat.on('off', {});\n\t\t\treturn gun;\n\t\t}\n\t\tvar obj = Gun.obj, obj_map = obj.map, obj_has = obj.has, obj_del = obj.del, obj_to = obj.to;\n\t\tvar rel = Gun.val.link;\n\t\tvar empty = {}, noop = function(){}, u;\n\t})(USE, './on');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./index');\n\t\tGun.chain.map = function(cb, opt, t){\n\t\t\tvar gun = this, cat = gun._, chain;\n\t\t\tif(!cb){\n\t\t\t\tif(chain = cat.each){ return chain }\n\t\t\t\tcat.each = chain = gun.chain();\n\t\t\t\tchain._.nix = gun.back('nix');\n\t\t\t\tgun.on('in', map, chain._);\n\t\t\t\treturn chain;\n\t\t\t}\n\t\t\tGun.log.once(\"mapfn\", \"Map functions are experimental, their behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.\");\n\t\t\tchain = gun.chain();\n\t\t\tgun.map().on(function(data, key, at, ev){\n\t\t\t\tvar next = (cb||noop).call(this, data, key, at, ev);\n\t\t\t\tif(u === next){ return }\n\t\t\t\tif(data === next){ return chain._.on('in', at) }\n\t\t\t\tif(Gun.is(next)){ return chain._.on('in', next._) }\n\t\t\t\tchain._.on('in', {get: key, put: next});\n\t\t\t});\n\t\t\treturn chain;\n\t\t}\n\t\tfunction map(msg){\n\t\t\tif(!msg.put || Gun.val.is(msg.put)){ return this.to.next(msg) }\n\t\t\tif(this.as.nix){ this.off() } // TODO: Ugly hack!\n\t\t\tobj_map(msg.put, each, {at: this.as, msg: msg});\n\t\t\tthis.to.next(msg);\n\t\t}\n\t\tfunction each(v,k){\n\t\t\tif(n_ === k){ return }\n\t\t\tvar msg = this.msg, gun = msg.$, at = gun._, cat = this.at, tmp = at.lex;\n\t\t\tif(tmp && !Gun.text.match(k, tmp['.'] || tmp['#'] || tmp)){ return } // review?\n\t\t\t((tmp = gun.get(k)._).echo || (tmp.echo = {}))[cat.id] = tmp.echo[cat.id] || cat;\n\t\t}\n\t\tvar obj_map = Gun.obj.map, noop = function(){}, event = {stun: noop, off: noop}, n_ = Gun.node._, u;\n\t})(USE, './map');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('./index');\n\t\tGun.chain.set = function(item, cb, opt){\n\t\t\tvar gun = this, soul;\n\t\t\tcb = cb || function(){};\n\t\t\topt = opt || {}; opt.item = opt.item || item;\n\t\t\tif(soul = Gun.node.soul(item)){ item = Gun.obj.put({}, soul, Gun.val.link.ify(soul)) }\n\t\t\tif(!Gun.is(item)){\n\t\t\t\tif(Gun.obj.is(item)){;\n\t\t\t\t\titem = gun.back(-1).get(soul = soul || Gun.node.soul(item) || gun.back('opt.uuid')()).put(item);\n\t\t\t\t}\n\t\t\t\treturn gun.get(soul || (Gun.state.lex() + Gun.text.random(7))).put(item, cb, opt);\n\t\t\t}\n\t\t\titem.get(function(soul, o, msg){\n\t\t\t\tif(!soul){ return cb.call(gun, {err: Gun.log('Only a node can be linked! Not \"' + msg.put + '\"!')}) }\n\t\t\t\tgun.put(Gun.obj.put({}, soul, Gun.val.link.ify(soul)), cb, opt);\n\t\t\t},true);\n\t\t\treturn item;\n\t\t}\n\t})(USE, './set');\n\n\t;USE(function(module){\n\t\tif(typeof Gun === 'undefined'){ return } // TODO: localStorage is Browser only. But it would be nice if it could somehow plugin into NodeJS compatible localStorage APIs?\n\n\t\tvar root, noop = function(){}, store, u;\n\t\ttry{store = (Gun.window||noop).localStorage}catch(e){}\n\t\tif(!store){\n\t\t\tconsole.log(\"Warning: No localStorage exists to persist data to!\");\n\t\t\tstore = {setItem: function(k,v){this[k]=v}, removeItem: function(k){delete this[k]}, getItem: function(k){return this[k]}};\n\t\t}\n\t\t/*\n\t\t\tNOTE: Both `lib/file.js` and `lib/memdisk.js` are based on this design!\n\t\t\tIf you update anything here, consider updating the other adapters as well.\n\t\t*/\n\n\t\tGun.on('create', function(root){\n\t\t\t// This code is used to queue offline writes for resync.\n\t\t\t// See the next 'opt' code below for actual saving of data.\n\t\t\tvar ev = this.to, opt = root.opt;\n\t\t\tif(root.once){ return ev.next(root) }\n\t\t\t//if(false === opt.localStorage){ return ev.next(root) } // we want offline resynce queue regardless!\n\t\t\topt.prefix = opt.file || 'gun/';\n\t\t\tvar gap = Gun.obj.ify(store.getItem('gap/'+opt.prefix)) || {};\n\t\t\tvar empty = Gun.obj.empty, id, to, go;\n\t\t\t// add re-sync command.\n\t\t\tif(!empty(gap)){\n\t\t\t\tvar disk = Gun.obj.ify(store.getItem(opt.prefix)) || {}, send = {};\n\t\t\t\tGun.obj.map(gap, function(node, soul){\n\t\t\t\t\tGun.obj.map(node, function(val, key){\n\t\t\t\t\t\tsend[soul] = Gun.state.to(disk[soul], key, send[soul]);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t// TODO: Holy Grail dangling by this thread! If gap / offline resync doesn't trigger, it doesn't work. Ouch, and this is a localStorage specific adapter. :(\n\t\t\t\t\troot.on('out', {put: send, '#': root.ask(ack)});\n\t\t\t\t},1);\n\t\t\t}\n\n\t\t\troot.on('out', function(msg){\n\t\t\t\tif(msg.lS){ return } // TODO: for IndexedDB and others, shouldn't send to peers ACKs to our own GETs.\n\t\t\t\tif(Gun.is(msg.$) && msg.put && !msg['@']){\n\t\t\t\t\tid = msg['#'];\n\t\t\t\t\tGun.graph.is(msg.put, null, map);\n\t\t\t\t\tif(!to){ to = setTimeout(flush, opt.wait || 1) }\n\t\t\t\t}\n\t\t\t\tthis.to.next(msg);\n\t\t\t});\n\t\t\troot.on('ack', ack);\n\n\t\t\tfunction ack(ack){ // TODO: This is experimental, not sure if we should keep this type of event hook.\n\t\t\t\tif(ack.err || !ack.ok){ return }\n\t\t\t\tvar id = ack['@'];\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tGun.obj.map(gap, function(node, soul){\n\t\t\t\t\t\tGun.obj.map(node, function(val, key){\n\t\t\t\t\t\t\tif(id !== val){ return }\n\t\t\t\t\t\t\tdelete node[key];\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif(empty(node)){\n\t\t\t\t\t\t\tdelete gap[soul];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tflush();\n\t\t\t\t}, opt.wait || 1);\n\t\t\t};\n\t\t\tev.next(root);\n\n\t\t\tvar map = function(val, key, node, soul){\n\t\t\t\t(gap[soul] || (gap[soul] = {}))[key] = id;\n\t\t\t}\n\t\t\tvar flush = function(){\n\t\t\t\tclearTimeout(to);\n\t\t\t\tto = false;\n\t\t\t\ttry{store.setItem('gap/'+opt.prefix, JSON.stringify(gap));\n\t\t\t\t}catch(e){ Gun.log(err = e || \"localStorage failure\") }\n\t\t\t}\n\t\t});\n\n\t\tGun.on('create', function(root){\n\t\t\tthis.to.next(root);\n\t\t\tvar opt = root.opt;\n\t\t\tif(root.once){ return }\n\t\t\tif(false === opt.localStorage){ return }\n\t\t\topt.prefix = opt.file || 'gun/';\n\t\t\tvar graph = root.graph, acks = {}, count = 0, to;\n\t\t\tvar disk = Gun.obj.ify(store.getItem(opt.prefix)) || {};\n\t\t\tvar lS = function(){}, u;\n\t\t\troot.on('localStorage', disk); // NON-STANDARD EVENT!\n\n\t\t\troot.on('put', function(at){\n\t\t\t\tthis.to.next(at);\n\t\t\t\tGun.graph.is(at.put, null, map);\n\t\t\t\tif(!at['@']){ acks[at['#']] = true; } // only ack non-acks.\n\t\t\t\tcount += 1;\n\t\t\t\tif(count >= (opt.batch || 1000)){\n\t\t\t\t\treturn flush();\n\t\t\t\t}\n\t\t\t\tif(to){ return }\n\t\t\t\tto = setTimeout(flush, opt.wait || 1);\n\t\t\t});\n\n\t\t\troot.on('get', function(msg){\n\t\t\t\tthis.to.next(msg);\n\t\t\t\tvar lex = msg.get, soul, data, u;\n\t\t\t\tfunction to(){\n\t\t\t\tif(!lex || !(soul = lex['#'])){ return }\n\t\t\t\t//if(0 >= msg.cap){ return }\n\t\t\t\tvar has = lex['.'];\n\t\t\t\tdata = disk[soul] || u;\n\t\t\t\tif(data && has){\n\t\t\t\t\tdata = Gun.state.to(data, has);\n\t\t\t\t}\n\t\t\t\t//if(!data && !Gun.obj.empty(opt.peers)){ return } // if data not found, don't ack if there are peers. // Hmm, what if we have peers but we are disconnected?\n\t\t\t\t//console.log(\"lS get\", lex, data);\n\t\t\t\troot.on('in', {'@': msg['#'], put: Gun.graph.node(data), how: 'lS', lS: msg.$});// || root.$});\n\t\t\t\t};\n\t\t\t\tGun.debug? setTimeout(to,1) : to();\n\t\t\t});\n\n\t\t\tvar map = function(val, key, node, soul){\n\t\t\t\tdisk[soul] = Gun.state.to(node, key, disk[soul]);\n\t\t\t}\n\n\t\t\tvar flush = function(data){\n\t\t\t\tvar err;\n\t\t\t\tcount = 0;\n\t\t\t\tclearTimeout(to);\n\t\t\t\tto = false;\n\t\t\t\tvar ack = acks;\n\t\t\t\tacks = {};\n\t\t\t\tif(data){ disk = data }\n\t\t\t\ttry{store.setItem(opt.prefix, JSON.stringify(disk));\n\t\t\t\t}catch(e){\n\t\t\t\t\tGun.log(err = (e || \"localStorage failure\") + \" Consider using GUN's IndexedDB plugin for RAD for more storage space, https://gun.eco/docs/RAD#install\");\n\t\t\t\t\troot.on('localStorage:error', {err: err, file: opt.prefix, flush: disk, retry: flush});\n\t\t\t\t}\n\t\t\t\tif(!err && !Gun.obj.empty(opt.peers)){ return } // only ack if there are no peers.\n\t\t\t\tGun.obj.map(ack, function(yes, id){\n\t\t\t\t\troot.on('in', {\n\t\t\t\t\t\t'@': id,\n\t\t\t\t\t\terr: err,\n\t\t\t\t\t\tok: 0 // localStorage isn't reliable, so make its `ok` code be a low number.\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t})(USE, './adapters/localStorage');\n\n\t;USE(function(module){\n\t\tvar Type = USE('../type');\n\n\t\tfunction Mesh(root){\n\t\t\tvar mesh = function(){};\n\t\t\tvar opt = root.opt || {};\n\t\t\topt.log = opt.log || console.log;\n\t\t\topt.gap = opt.gap || opt.wait || 1;\n\t\t\topt.pack = opt.pack || (opt.memory? (opt.memory * 1000 * 1000) : 1399000000) * 0.3; // max_old_space_size defaults to 1400 MB.\n\n\t\t\tvar dup = root.dup;\n\n\t\t\tmesh.hear = function(raw, peer){\n\t\t\t\tif(!raw){ return }\n\t\t\t\tvar msg, id, hash, tmp = raw[0];\n\t\t\t\tif(opt.pack <= raw.length){ return mesh.say({dam: '!', err: \"Message too big!\"}, peer) }\n\t\t\t\tif('{' != raw[2]){ mesh.hear.d += raw.length||0; ++mesh.hear.c; } // STATS! // ugh, stupid double JSON encoding\n\t\t\t\tif('[' === tmp){\n\t\t\t\t\ttry{msg = JSON.parse(raw);}catch(e){opt.log('DAM JSON parse error', e)}\n\t\t\t\t\tif(!msg){ return }\n\t\t\t\t\tvar i = 0, m;\n\t\t\t\t\twhile(m = msg[i++]){\n\t\t\t\t\t\tmesh.hear(m, peer);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif('{' === tmp || (Type.obj.is(raw) && (msg = raw))){\n\t\t\t\t\ttry{msg = msg || JSON.parse(raw);\n\t\t\t\t\t}catch(e){return opt.log('DAM JSON parse error', e)}\n\t\t\t\t\tif(!msg){ return }\n\t\t\t\t\tif(!(id = msg['#'])){ id = msg['#'] = Type.text.random(9) }\n\t\t\t\t\tif(dup.check(id)){ return }\n\t\t\t\t\tdup.track(id, true).it = msg; // GUN core also dedups, so `true` is needed. // Does GUN core need to dedup anymore?\n\t\t\t\t\tif(!(hash = msg['##']) && u !== msg.put){ hash = msg['##'] = Type.obj.hash(msg.put) }\n\t\t\t\t\tif(hash && (tmp = msg['@'] || (msg.get && id))){ // Reduces backward daisy in case varying hashes at different daisy depths are the same.\n\t\t\t\t\t\tif(dup.check(tmp+hash)){ return }\n\t\t\t\t\t\tdup.track(tmp+hash, true).it = msg; // GUN core also dedups, so `true` is needed. // Does GUN core need to dedup anymore?\n\t\t\t\t\t}\n\t\t\t\t\t(msg._ = function(){}).via = peer;\n\t\t\t\t\tif(tmp = msg['><']){ (msg._).to = Type.obj.map(tmp.split(','), tomap) }\n\t\t\t\t\tif(msg.dam){\n\t\t\t\t\t\tif(tmp = mesh.hear[msg.dam]){\n\t\t\t\t\t\t\ttmp(msg, peer, root);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\troot.on('in', msg);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar tomap = function(k,i,m){m(k,true)};\n\t\t\tmesh.hear.c = mesh.hear.d = 0;\n\n\t\t\t;(function(){\n\t\t\t\tvar message;\n\t\t\t\tfunction each(peer){ mesh.say(message, peer) }\n\t\t\t\tmesh.say = function(msg, peer){\n\t\t\t\t\tif(this.to){ this.to.next(msg) } // compatible with middleware adapters.\n\t\t\t\t\tif(!msg){ return false }\n\t\t\t\t\tvar id, hash, tmp, raw;\n\t\t\t\t\tvar meta = msg._||(msg._=function(){});\n\t\t\t\t\tif(!(id = msg['#'])){ id = msg['#'] = Type.text.random(9) }\n\t\t\t\t\tif(!(hash = msg['##']) && u !== msg.put){ hash = msg['##'] = Type.obj.hash(msg.put) }\n\t\t\t\t\tif(!(raw = meta.raw)){\n\t\t\t\t\t\traw = meta.raw = mesh.raw(msg);\n\t\t\t\t\t\tif(hash && (tmp = msg['@'])){\n\t\t\t\t\t\t\tdup.track(tmp+hash).it = msg;\n\t\t\t\t\t\t\tif(tmp = (dup.s[tmp]||ok).it){\n\t\t\t\t\t\t\t\tif(hash === tmp['##']){ return false }\n\t\t\t\t\t\t\t\ttmp['##'] = hash;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdup.track(id).it = msg; // track for 9 seconds, default. Earth<->Mars would need more!\n\t\t\t\t\tif(!peer){ peer = (tmp = dup.s[msg['@']]) && (tmp = tmp.it) && (tmp = tmp._) && (tmp = tmp.via) }\n\t\t\t\t\tif(!peer && mesh.way){ return mesh.way(msg) }\n\t\t\t\t\tif(!peer || !peer.id){ message = msg;\n\t\t\t\t\t\tif(!Type.obj.is(peer || opt.peers)){ return false }\n\t\t\t\t\t\tType.obj.map(peer || opt.peers, each); // in case peer is a peer list.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif(!peer.wire && mesh.wire){ mesh.wire(peer) }\n\t\t\t\t\tif(id === peer.last){ return } peer.last = id;  // was it just sent?\n\t\t\t\t\tif(peer === meta.via){ return false }\n\t\t\t\t\tif((tmp = meta.to) && (tmp[peer.url] || tmp[peer.pid] || tmp[peer.id]) /*&& !o*/){ return false }\n\t\t\t\t\tif(peer.batch){\n\t\t\t\t\t\tpeer.tail = (tmp = peer.tail || 0) + raw.length;\n\t\t\t\t\t\tif(peer.tail <= opt.pack){\n\t\t\t\t\t\t\tpeer.batch.push(raw); // peer.batch += (tmp?'':',')+raw; // TODO: Prevent double JSON! // FOR v1.0 !?\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tflush(peer);\n\t\t\t\t\t}\n\t\t\t\t\tpeer.batch = []; // peer.batch = '['; // TODO: Prevent double JSON!\n\t\t\t\t\tsetTimeout(function(){flush(peer)}, opt.gap);\n\t\t\t\t\tsend(raw, peer);\n\t\t\t\t}\n\t\t\t\tfunction flush(peer){\n\t\t\t\t\tvar tmp = peer.batch; // var tmp = peer.batch + ']'; // TODO: Prevent double JSON!\n\t\t\t\t\tpeer.batch = peer.tail = null;\n\t\t\t\t\tif(!tmp){ return }\n\t\t\t\t\tif(!tmp.length){ return } // if(3 > tmp.length){ return } // TODO: ^\n\t\t\t\t\ttry{tmp = (1 === tmp.length? tmp[0] : JSON.stringify(tmp));\n\t\t\t\t\t}catch(e){return opt.log('DAM JSON stringify error', e)}\n\t\t\t\t\tif(!tmp){ return }\n\t\t\t\t\tsend(tmp, peer);\n\t\t\t\t}\n\t\t\t\tmesh.say.c = mesh.say.d = 0;\n\t\t\t}());\n\t\t\t\n\t\t\t// for now - find better place later.\n\t\t\tfunction send(raw, peer){ try{\n\t\t\t\tvar wire = peer.wire;\n\t\t\t\tif(peer.say){\n\t\t\t\t\tpeer.say(raw);\n\t\t\t\t} else\n\t\t\t\tif(wire.send){\n\t\t\t\t\twire.send(raw);\n\t\t\t\t}\n\t\t\t\tmesh.say.d += raw.length||0; ++mesh.say.c; // STATS!\n\t\t\t}catch(e){\n\t\t\t\t(peer.queue = peer.queue || []).push(raw);\n\t\t\t}}\n\n\t\t\t;(function(){\n\t\t\t\tmesh.raw = function(msg){ // TODO: Clean this up / delete it / move logic out!\n\t\t\t\t\tif(!msg){ return '' }\n\t\t\t\t\tvar meta = (msg._) || {}, put, hash, tmp;\n\t\t\t\t\tif(tmp = meta.raw){ return tmp }\n\t\t\t\t\tif(typeof msg === 'string'){ return msg }\n\t\t\t\t\tif(!msg.dam){\n\t\t\t\t\t\tvar i = 0, to = []; Type.obj.map(opt.peers, function(p){\n\t\t\t\t\t\t\tto.push(p.url || p.pid || p.id); if(++i > 9){ return true } // limit server, fast fix, improve later! // For \"tower\" peer, MUST include 6 surrounding ids.\n\t\t\t\t\t\t}); if(i > 1){ msg['><'] = to.join() }\n\t\t\t\t\t}\n\t\t\t\t\tvar raw = $(msg); // optimize by reusing put = the JSON.stringify from .hash?\n\t\t\t\t\t/*if(u !== put){\n\t\t\t\t\t\ttmp = raw.indexOf(_, raw.indexOf('put'));\n\t\t\t\t\t\traw = raw.slice(0, tmp-1) + put + raw.slice(tmp + _.length + 1);\n\t\t\t\t\t\t//raw = raw.replace('\"'+ _ +'\"', put); // NEVER USE THIS! ALSO NEVER DELETE IT TO NOT MAKE SAME MISTAKE! https://github.com/amark/gun/wiki/@$$ Heisenbug\n\t\t\t\t\t}*/\n\t\t\t\t\tif(meta){ meta.raw = raw }\n\t\t\t\t\treturn raw;\n\t\t\t\t}\n\t\t\t\tvar $ = JSON.stringify, _ = ':])([:';\n\n\t\t\t}());\n\n\t\t\tmesh.hi = function(peer){\n\t\t\t\tvar tmp = peer.wire || {};\n\t\t\t\tif(peer.id){\n\t\t\t\t\topt.peers[peer.url || peer.id] = peer;\n\t\t\t\t} else {\n\t\t\t\t\ttmp = peer.id = peer.id || Type.text.random(9);\n\t\t\t\t\tmesh.say({dam: '?'}, opt.peers[tmp] = peer);\n\t\t\t\t}\n\t\t\t\tpeer.met = peer.met || +(new Date);\n\t\t\t\tif(!tmp.hied){ root.on(tmp.hied = 'hi', peer) }\n\t\t\t\t// @rogowski I need this here by default for now to fix go1dfish's bug\n\t\t\t\ttmp = peer.queue; peer.queue = [];\n\t\t\t\tType.obj.map(tmp, function(msg){\n\t\t\t\t\tsend(msg, peer);\n\t\t\t\t});\n\t\t\t}\n\t\t\tmesh.bye = function(peer){\n\t\t\t\troot.on('bye', peer);\n\t\t\t\tvar tmp = +(new Date); tmp = (tmp - (peer.met||tmp));\n\t\t\t\tmesh.bye.time = ((mesh.bye.time || tmp) + tmp) / 2;\n\t\t\t}\n\t\t\tmesh.hear['!'] = function(msg, peer){ opt.log('Error:', msg.err) }\n\t\t\tmesh.hear['?'] = function(msg, peer){\n\t\t\t\tif(!msg.pid){\n\t\t\t\t\tmesh.say({dam: '?', pid: opt.pid, '@': msg['#']}, peer);\n\t\t\t\t\t// @rogowski I want to re-enable this AXE logic with some fix/merge later.\n\t\t\t\t\t/* var tmp = peer.queue; peer.queue = [];\n\t\t\t\t\tType.obj.map(tmp, function(msg){\n\t\t\t\t\t\tmesh.say(msg, peer);\n\t\t\t\t\t}); */\n\t\t\t\t\t// @rogowski 2: I think with my PID fix we can delete this and use the original. \n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(peer.pid){ return }\n\t\t\t\tpeer.pid = msg.pid;\n\t\t\t}\n\n\t\t\troot.on('create', function(root){\n\t\t\t\troot.opt.pid = root.opt.pid || Type.text.random(9);\n\t\t\t\tthis.to.next(root);\n\t\t\t\troot.on('out', mesh.say);\n\t\t\t});\n\n\t\t\troot.on('bye', function(peer, tmp){\n\t\t\t\tpeer = opt.peers[peer.id || peer] || peer; \n\t\t\t\tthis.to.next(peer);\n\t\t\t\tpeer.bye? peer.bye() : (tmp = peer.wire) && tmp.close && tmp.close();\n\t\t\t\tType.obj.del(opt.peers, peer.id);\n\t\t\t\tpeer.wire = null;\n\t\t\t});\n\n\t\t\tvar gets = {};\n\t\t\troot.on('bye', function(peer, tmp){ this.to.next(peer);\n\t\t\t\tif(!(tmp = peer.url)){ return } gets[tmp] = true;\n\t\t\t\tsetTimeout(function(){ delete gets[tmp] },opt.lack || 9000);\n\t\t\t});\n\t\t\troot.on('hi', function(peer, tmp){ this.to.next(peer);\n\t\t\t\tif(!(tmp = peer.url) || !gets[tmp]){ return } delete gets[tmp];\n\t\t\t\tType.obj.map(root.next, function(node, soul){\n\t\t\t\t\ttmp = {}; tmp[soul] = root.graph[soul];\n\t\t\t\t\tmesh.say({'##': Type.obj.hash(tmp), get: {'#': soul}}, peer);\n\t\t\t\t})\n\t\t\t});\n\n\t\t\treturn mesh;\n\t\t}\n\n\t\t;(function(){\n\t\t\tType.text.hash = function(s){ // via SO\n\t\t\t\tif(typeof s !== 'string'){ return {err: 1} }\n\t\t    var c = 0;\n\t\t    if(!s.length){ return c }\n\t\t    for(var i=0,l=s.length,n; i<l; ++i){\n\t\t      n = s.charCodeAt(i);\n\t\t      c = ((c<<5)-c)+n;\n\t\t      c |= 0;\n\t\t    }\n\t\t    return c; // Math.abs(c);\n\t\t  }\n\t\t\t\n\t\t\tvar $ = JSON.stringify, u;\n\n\t\t\tType.obj.hash = function(obj, hash){\n\t\t\t\tif(!hash && u === (obj = $(obj, sort))){ return }\n\t\t\t\treturn Type.text.hash(hash || obj || '');\n\t\t\t}\n\n\t\t\tfunction sort(k, v){ var tmp;\n\t\t\t\tif(!(v instanceof Object)){ return v }\n\t\t\t\tType.obj.map(Object.keys(v).sort(), map, {to: tmp = {}, on: v});\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\tType.obj.hash.sort = sort;\n\n\t\t\tfunction map(k){\n\t\t\t\tthis.to[k] = this.on[k];\n\t\t\t}\n\t\t}());\n\n\t  var empty = {}, ok = true, u;\n\n\t  try{ module.exports = Mesh }catch(e){}\n\n\t})(USE, './adapters/mesh');\n\n\t;USE(function(module){\n\t\tvar Gun = USE('../index');\n\t\tGun.Mesh = USE('./mesh');\n\n\t\tGun.on('opt', function(root){\n\t\t\tthis.to.next(root);\n\t\t\tvar opt = root.opt;\n\t\t\tif(root.once){ return }\n\t\t\tif(false === opt.WebSocket){ return }\n\n\t\t\tvar env;\n\t\t\tif(typeof window !== \"undefined\"){ env = window }\n\t\t\tif(typeof global !== \"undefined\"){ env = global }\n\t\t\tenv = env || {};\n\n\t\t\tvar websocket = opt.WebSocket || env.WebSocket || env.webkitWebSocket || env.mozWebSocket;\n\t\t\tif(!websocket){ return }\n\t\t\topt.WebSocket = websocket;\n\n\t\t\tvar mesh = opt.mesh = opt.mesh || Gun.Mesh(root);\n\n\t\t\tvar wire = mesh.wire || opt.wire;\n\t\t\tmesh.wire = opt.wire = open;\n\t\t\tfunction open(peer){ try{\n\t\t\t\tif(!peer || !peer.url){ return wire && wire(peer) }\n\t\t\t\tvar url = peer.url.replace('http', 'ws');\n\t\t\t\tvar wire = peer.wire = new opt.WebSocket(url);\n\t\t\t\twire.onclose = function(){\n\t\t\t\t\topt.mesh.bye(peer);\n\t\t\t\t\treconnect(peer);\n\t\t\t\t};\n\t\t\t\twire.onerror = function(error){\n\t\t\t\t\treconnect(peer);\n\t\t\t\t};\n\t\t\t\twire.onopen = function(){\n\t\t\t\t\topt.mesh.hi(peer);\n\t\t\t\t}\n\t\t\t\twire.onmessage = function(msg){\n\t\t\t\t\tif(!msg){ return }\n\t\t\t\t\topt.mesh.hear(msg.data || msg, peer);\n\t\t\t\t};\n\t\t\t\treturn wire;\n\t\t\t}catch(e){}}\n\n\t\t\tvar wait = 2 * 1000;\n\t\t\tfunction reconnect(peer){\n\t\t\t\tclearTimeout(peer.defer);\n\t\t\t\tif(doc && peer.retry <= 0){ return } peer.retry = (peer.retry || opt.retry || 60) - 1;\n\t\t\t\tpeer.defer = setTimeout(function to(){\n\t\t\t\t\tif(doc && doc.hidden){ return setTimeout(to,wait) }\n\t\t\t\t\topen(peer);\n\t\t\t\t}, wait);\n\t\t\t}\n\t\t\tvar doc = 'undefined' !== typeof document && document;\n\t\t});\n\t\tvar noop = function(){};\n\t})(USE, './adapters/websocket');\n\n}());\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack://weir/./node_modules/gun/gun.js?");

/***/ }),

/***/ "./node_modules/gun/lib/load.js":
/*!**************************************!*\
  !*** ./node_modules/gun/lib/load.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Gun = (typeof window !== \"undefined\")? window.Gun : __webpack_require__(/*! ../gun */ \"./node_modules/gun/gun.js\");\nGun.chain.open || __webpack_require__(/*! ./open */ \"./node_modules/gun/lib/open.js\");\n\nGun.chain.load = function(cb, opt, at){\n\t(opt = opt || {}).off = !0;\n\treturn this.open(cb, opt, at);\n}\n\n//# sourceURL=webpack://weir/./node_modules/gun/lib/load.js?");

/***/ }),

/***/ "./node_modules/gun/lib/open.js":
/*!**************************************!*\
  !*** ./node_modules/gun/lib/open.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Gun = (typeof window !== \"undefined\")? window.Gun : __webpack_require__(/*! ../gun */ \"./node_modules/gun/gun.js\");\n\nGun.chain.open = function(cb, opt, at){\n\topt = opt || {};\n\topt.doc = opt.doc || {};\n\topt.ids = opt.ids || {};\n\topt.any = opt.any || cb;\n\topt.ev = opt.ev || {off: function(){\n\t\tGun.obj.map(opt.ev.s, function(e){\n\t\t\tif(e){ e.off() }\n\t\t});\n\t\topt.ev.s = {};\n\t}, s:{}}\n\treturn this.on(function(data, key, ctx, ev){\n\t\tdelete ((data = Gun.obj.copy(data))||{})._;\n\t\tclearTimeout(opt.to);\n\t\topt.to = setTimeout(function(){\n\t\t\tif(!opt.any){ return }\n\t\t\topt.any.call(opt.at.$, opt.doc, opt.key, opt, opt.ev);\n\t\t\tif(opt.off){\n\t\t\t\topt.ev.off();\n\t\t\t\topt.any = null;\n\t\t\t}\n\t\t}, opt.wait || 1);\n\t\topt.at = opt.at || ctx;\n\t\topt.key = opt.key || key;\n\t\topt.ev.s[this._.id] = ev;\n\t\tif(Gun.val.is(data)){\n\t\t\tif(!at){\n\t\t\t\topt.doc = data;\n\t\t\t} else {\n\t\t\t\tat[key] = data;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tvar tmp = this, id;\n\t\tGun.obj.map(data, function(val, key){\n\t\t\tvar doc = at || opt.doc;\n\t\t\tif (!doc) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!(id = Gun.val.link.is(val))){\n\t\t\t\tdoc[key] = val;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(opt.ids[id]){\n\t\t\t\tdoc[key] = opt.ids[id];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttmp.get(key).open(opt.any, opt, opt.ids[id] = doc[key] = {});\n\t\t});\n\t})\n}\n\n\n//# sourceURL=webpack://weir/./node_modules/gun/lib/open.js?");

/***/ }),

/***/ "./node_modules/gun/lib/then.js":
/*!**************************************!*\
  !*** ./node_modules/gun/lib/then.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Gun = (typeof window !== \"undefined\")? window.Gun : __webpack_require__(/*! ../gun */ \"./node_modules/gun/gun.js\");\n\nGun.chain.promise = function(cb) {\n  var gun = this, cb = cb || function(ctx) { return ctx };\n  return (new Promise(function(res, rej) {\n    gun.once(function(data, key){\n    \tres({put: data, get: key, gun: this});\n    });\n  })).then(cb);\n};\n\nGun.chain.then = function(cb) {\n\treturn this.promise(function(res){\n\t\treturn cb? cb(res.put) : res.put;\n\t});\n};\n\n//# sourceURL=webpack://weir/./node_modules/gun/lib/then.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://weir/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://weir/(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack://weir/(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/bucket.js":
/*!***********************!*\
  !*** ./src/bucket.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _weir__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weir */ \"./src/weir.js\");\n/* harmony import */ var _structures_generic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./structures/generic */ \"./src/structures/generic.js\");\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity */ \"./src/identity.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((bucketDesc, construct) => {\n    const identity = Symbol.for(bucketDesc);\n    Object(_identity__WEBPACK_IMPORTED_MODULE_2__[\"validIdentity\"])(identity);\n\n    const bucketNode = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"match\"])(\n        [bucketDesc.match(/^G/), () => _weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"].app.get(bucketDesc)],\n        [bucketDesc.match(/^L/), () => _weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"].private.get(bucketDesc)],\n    );\n\n    const bucketWrapper = typeof construct === \"function\" ?\n        construct(identity, bucketNode) :\n        Object(_structures_generic__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(identity, bucketNode, construct);\n\n    const filledBucket = {\n        identity,\n        ...bucketWrapper,\n    };\n\n    _weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bucketsList.push(identity.description);\n    _weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buckets.set(identity, bucketWrapper.struct);\n\n    filledBucket.initialState = bucketWrapper.struct.rehydrate();\n\n    if (document.env !== \"development\") return filledBucket;\n\n    const bucketsNode = _weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"].app.get(\"[BUCKETS]\");\n    const oldBuckets = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"nodeRead\"])(bucketsNode);\n    const newBuckets = _weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bucketsList.sort().join(\",\");\n\n    if (oldBuckets === undefined) {\n        bucketsNode.put(newBuckets);\n    } else if (oldBuckets !== newBuckets) {\n        localStorage.clear();\n        bucketsNode.put(newBuckets);\n        typeof window !== 'undefined' && window.location.reload();\n    }\n\n    return filledBucket;\n});\n\n\n//# sourceURL=webpack://weir/./src/bucket.js?");

/***/ }),

/***/ "./src/connect.js":
/*!************************!*\
  !*** ./src/connect.js ***!
  \************************/
/*! exports provided: funnel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"funnel\", function() { return funnel; });\n/* harmony import */ var _react_weir__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./react-weir */ \"./src/react-weir.js\");\n// import { stripDeep } from './util';\n\n\nconst funnel = (bucket, inputs, Component) => {\n\tlet initialState = {};\n\n\tif (typeof Component !== 'function') {\n\t\tthrow new Error(`\\`bind\\` expects a React component, but received ${typeof Component} instead.`);\n\t}\n\n\treturn Object(_react_weir__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Component, bucket, inputs, initialState);\n};\n\n\n//# sourceURL=webpack://weir/./src/connect.js?");

/***/ }),

/***/ "./src/events.js":
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\nconst events = {\n\tqueues: {\n\t\tbuckets_ready: new Set(),\n\t\tstruct_ready: new Set(),\n\t},\n\ton(name, fn) {\n\t\tif (events.queues[name]) events.queues[name].add(fn);\n\t\telse throw new Error(`No queue named '${name}'`);\n\t},\n\temit(name, data) {\n\t\tif (events.queues[name]) {\n\t\t\tconst removals = new Set();\n\n\t\t\tevents.queues[name].forEach(fn => {\n\t\t\t\tfn(data) === Symbol.for('unlisten') && removals.add(fn);\n\t\t\t});\n\t\t\tremovals.forEach(fn => {\n\t\t\t\tevents.queues[name].delete(fn);\n\t\t\t});\n\t\t}\n\t},\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (events);\n\n\n//# sourceURL=webpack://weir/./src/events.js?");

/***/ }),

/***/ "./src/identity.js":
/*!*************************!*\
  !*** ./src/identity.js ***!
  \*************************/
/*! exports provided: validIdentity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validIdentity\", function() { return validIdentity; });\nconst bucketRegex = /^(GLOBAL|LOCAL)\\.[A-Z0-9-_]+$/;\n\nconst validIdentity = (sym) => {\n\tif (typeof sym !== 'symbol' || Symbol.for(sym.description) !== sym) {\n\t\tthrow new Error(\"Invalid identity, use `Symbol.for('...')`\");\n\t}\n\tif (!bucketRegex.test(sym.description)) {\n\t\tthrow new Error(`Identity description must match pattern ${bucketRegex.toString()}`);\n\t}\n\treturn true;\n};\n\n\n//# sourceURL=webpack://weir/./src/identity.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: funnel, bucket, tank */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, process) {/* harmony import */ var _bucket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bucket */ \"./src/bucket.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"bucket\", function() { return _bucket__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _connect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connect */ \"./src/connect.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"funnel\", function() { return _connect__WEBPACK_IMPORTED_MODULE_1__[\"funnel\"]; });\n\n/* harmony import */ var _weir__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./weir */ \"./src/weir.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tank\", function() { return _weir__WEBPACK_IMPORTED_MODULE_2__[\"tank\"]; });\n\nconst _global = (typeof window === 'undefined') ? global : window;\n_global.window = _global;\nwindow = { location: { reload: () => {} } };\n_global.document = _global.document || {};\ndocument.env = typeof process !== 'undefined' ? process.env.DEVELOPMENT : \"development\";\n\n__webpack_require__(/*! ./polyfills */ \"./src/polyfills.js\");\n\n\n\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://weir/./src/index.js?");

/***/ }),

/***/ "./src/polyfills.js":
/*!**************************!*\
  !*** ./src/polyfills.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nArray.prototype.flat = Array.prototype.flat || function flattenDeep (arr1) {\n   return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n};\n\n\n//# sourceURL=webpack://weir/./src/polyfills.js?");

/***/ }),

/***/ "./src/react-weir.js":
/*!***************************!*\
  !*** ./src/react-weir.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"lodash\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\n\n\n\n\nconst reducer = (state, { propKey, propVal }) => {\n    let newState = {\n        ...state,\n    };\n\n    if (typeof propKey === \"string\" && propKey.match(/\\./)) {\n        const branch = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"zipObjectDeep\"])([propKey], [propVal]);\n        Object(react__WEBPACK_IMPORTED_MODULE_0__[\"merge\"])(newState, branch);\n    } else {\n        newState[propKey] = propVal;\n    }\n\n    return newState;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((Component, bucket, inputs, initialState) => (ownProps) => {\n    const [state, dispatch] = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useReducer\"])(reducer, initialState || {});\n    console.log('RENDER:', JSON.stringify(state));\n\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\n        if (!bucket || !bucket.struct) return;\n        const { struct } = bucket;\n\n        inputs.forEach((key) => {\n            struct.sub(key, (path, val) => dispatch({\n                propKey: path,\n                propVal: Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"stripDeep\"])(val),\n            }));\n        });\n\n        return struct.vacate;\n    }, [bucket]);\n\n    return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(Component, {\n        ...ownProps,\n        bucketMethods: bucket && bucket.methods || {},\n        bucketState: state,\n    });\n});\n\n\n//# sourceURL=webpack://weir/./src/react-weir.js?");

/***/ }),

/***/ "./src/structures/generic.js":
/*!***********************************!*\
  !*** ./src/structures/generic.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst priv = Symbol('inaccessible');\n\nconst generic = (identity, bucketNode, construct) => {\n\tif (!construct.properties) throw new Error(\"Bucket construct must have `properties`\");\n\n\tlet hydrated = false;\n\n\tconst struct = {\n\n\t\t[Symbol.for('identity')]: identity,\n\n\t\t[Symbol.toStringTag]: 'SubstrateStructure',\n\n\t\t[priv]: {\n\t\t\tbucket: bucketNode,\n\t\t\tpropNodes: {},\n\t\t\twatchList: {},\n\t\t\tlisteners: {},\n\t\t},\n\n\t\tstate: {},\n\n\t\ttriggerWatchers(propKey) {\n\t\t\tconst watchers = struct[priv].watchList[propKey];\n\t\t\tif (watchers) watchers.forEach(fn => fn(struct.state[propKey]));\n\t\t},\n\n\t\trehydrate() {\n\t\t\tconst { listeners } = struct[priv];\n\n\t\t\tif (hydrated) return struct.state;\n\n\t\t\tObject.entries(construct.properties).forEach(([propKey, propVal]) => {\n\t\t\t\tpropVal = propVal.default || propVal;\n\n\t\t\t\tconst node = bucketNode.get(propKey);\n\t\t\t\tconst watchers = new Set();\n\t\t\t\tstruct[priv].watchList[propKey] = watchers;\n\t\t\t\tstruct[priv].propNodes[propKey] = node;\n\t\t\t\tstruct.state[propKey] = propVal;\n\n\t\t\t\tnode.once(val => {\n\t\t\t\t\tstruct.state[propKey] = val || propVal;\n\t\t\t\t\tnode.put(val || propVal);\n\t\t\t\t});\n\t\t\t\tnode.on((val, key, _, chain) => {\n\t\t\t\t\tstruct.state[key] = val;\n\t\t\t\t\twatchers.forEach(fn => fn(key, val));\n\t\t\t\t\t// if we later need to remove the listener\n\t\t\t\t\tif (!listeners[propKey]) listeners[propKey] = chain;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\thydrated = true;\n\n\t\t\treturn struct.state;\n\t\t},\n\n\t\tvacate() {\n\t\t\tObject.values(struct[priv].watchList).forEach(w=> w.clear());\n\t\t\tObject.values(struct[priv].listeners).forEach(l=> l.off());\n\t\t\tstruct = null;\n\t\t},\n\n\t\tsub(propKey, listener) {\n\t\t\tstruct[priv].watchList[propKey].add(listener);\n\t\t},\n\n\t\tunsub(propKey, listener) {\n\t\t\tstruct[priv].watchList[propKey].delete(listener);\n\t\t},\n\n\t\tput(propKey, propVal) {\n\t\t\tconst node = struct[priv].propNodes[propKey];\n\t\t\tif (!node) { console.warn(`No propKey match for '${propKey}'`); return; }\n\t\t\tnode.put(propVal);\n\t\t}\n\t};\n\n\treturn {\n\t\tmethods: construct.methods && construct.methods(struct),\n\t\tstruct,\n\t};\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (generic);\n\n\n//# sourceURL=webpack://weir/./src/structures/generic.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! exports provided: st, mt, strip, nodeRead, stripDeep, match, coordStringToArray, range */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"st\", function() { return st; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mt\", function() { return mt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"strip\", function() { return strip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeRead\", function() { return nodeRead; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stripDeep\", function() { return stripDeep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"match\", function() { return match; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"coordStringToArray\", function() { return coordStringToArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"range\", function() { return range; });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst st = fn=> setTimeout(fn, 0);\n\nconst mt = fn=> Promise.resolve().then(fn);\n\nconst strip = (thing) => Object(lodash__WEBPACK_IMPORTED_MODULE_0__[\"omit\"])(thing, \"_\");\n\nconst nodeRead = node=> {\n\tlet result;\n\tnode.once(data => { result = data; });\n\treturn result;\n};\n\nconst stripDeep = (thing) => {\n\tif (typeof thing !== 'object') return thing;\n\tthing = strip(thing);\n\n\tObject.keys(thing).forEach(key => {\n\t\tstripProp(key, thing);\n\t});\n\n\treturn thing;\n};\nconst stripProp = (key, thing) => {\n\tif (typeof thing[key] !== 'object') return;\n\tthing[key] = Object(lodash__WEBPACK_IMPORTED_MODULE_0__[\"omit\"])(thing[key], \"_\");\n\n\tObject.keys(thing[key]).forEach(nextKey => {\n\t\tstripProp(nextKey, thing[key]);\n\t});\n};\nconst match = (...exps) => (\n\texps.find(exp=> exp[0])[1]()\n);\nconst coordStringToArray = coordStr => (\n\tcoordStr.replace(/^_/, \"\").split(\"_\").map(s => parseInt(s))\n);\nconst range = (len) => Array(Math.max(0, len))\n\t.fill(0)\n\t.reduce((sum, _, n) => sum.concat(n), []);\n\n\n//# sourceURL=webpack://weir/./src/util.js?");

/***/ }),

/***/ "./src/weir.js":
/*!*********************!*\
  !*** ./src/weir.js ***!
  \*********************/
/*! exports provided: default, tank */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tank\", function() { return tank; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/events.js\");\n/* harmony import */ var gun_gun__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gun/gun */ \"./node_modules/gun/gun.js\");\n/* harmony import */ var gun_gun__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(gun_gun__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gun_lib_then__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gun/lib/then */ \"./node_modules/gun/lib/then.js\");\n/* harmony import */ var gun_lib_then__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gun_lib_then__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var gun_lib_open__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gun/lib/open */ \"./node_modules/gun/lib/open.js\");\n/* harmony import */ var gun_lib_open__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(gun_lib_open__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var gun_lib_load__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gun/lib/load */ \"./node_modules/gun/lib/load.js\");\n/* harmony import */ var gun_lib_load__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(gun_lib_load__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _bucket__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bucket */ \"./src/bucket.js\");\n\n\n// import \"gun/sea\";\n\n\n\n\n\nconst weir = {\n\tbucketsList: [],\n\tbuckets: new Map(),\n\tget events() { return _events__WEBPACK_IMPORTED_MODULE_0__[\"default\"] },\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (weir);\n\nconst tank = (options) => {\n\tconst {\n\t\tnamespace = \"@pp\",\n\t\tlisteners,\n\t\tpeers,\n\t\tdebug,\n\t\t...gunOptions\n\t} = options;\n\n\tconst oldNamespace = localStorage.getItem(\"weir-ns\");\n\n\tif (oldNamespace === null) {\n\t\tlocalStorage.setItem(\"weir-ns\", namespace);\n\t} else if (oldNamespace && oldNamespace !== namespace) {\n\t\tlocalStorage.clear();\n\t\tlocalStorage.setItem(\"weir-ns\", namespace);\n\t\ttypeof window !== 'undefined' && window.location.reload();\n\t\treturn;\n\t}\n\n\tweir.gun = gun_gun__WEBPACK_IMPORTED_MODULE_1___default()(peers, gunOptions);\n\tweir.app = weir.gun.get(namespace);\n\tweir.private = gun_gun__WEBPACK_IMPORTED_MODULE_1___default()({ websocket: false, localStorage: false });\n\n\tif (debug) {\n\t\tif (typeof window !== 'undefined') window.weir = weir;\n\t\telse global.weir = weir;\n\t}\n\n\treturn { bucket: _bucket__WEBPACK_IMPORTED_MODULE_5__[\"default\"] };\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://weir/./src/weir.js?");

/***/ }),

/***/ "lodash":
/*!*************************************************************************************!*\
  !*** external {"commonjs":"lodash","commonjs2":"lodash","amd":"lodash","root":"_"} ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;\n\n//# sourceURL=webpack://weir/external_%7B%22commonjs%22:%22lodash%22,%22commonjs2%22:%22lodash%22,%22amd%22:%22lodash%22,%22root%22:%22_%22%7D?");

/***/ })

/******/ });
});